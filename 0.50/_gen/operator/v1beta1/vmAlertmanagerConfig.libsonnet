{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='vmAlertmanagerConfig', url='', help='"VMAlertmanagerConfig is the Schema for the vmalertmanagerconfigs API"'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of VMAlertmanagerConfig', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'operator.victoriametrics.com/v1beta1',
    kind: 'VMAlertmanagerConfig',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"VMAlertmanagerConfigSpec defines configuration for VMAlertmanagerConfig\\nit must reference only locally defined objects"'),
  spec: {
    '#inhibit_rules':: d.obj(help="\"InhibitRules will only apply for alerts matching\\nthe resource's namespace.\""),
    inhibit_rules: {
      '#withEqual':: d.fn(help='"Labels that must have an equal value in the source and target alert for\\nthe inhibition to take effect."', args=[d.arg(name='equal', type=d.T.array)]),
      withEqual(equal): { equal: if std.isArray(v=equal) then equal else [equal] },
      '#withEqualMixin':: d.fn(help='"Labels that must have an equal value in the source and target alert for\\nthe inhibition to take effect."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='equal', type=d.T.array)]),
      withEqualMixin(equal): { equal+: if std.isArray(v=equal) then equal else [equal] },
      '#withSource_matchers':: d.fn(help='"SourceMatchers defines a list of matchers for which one or more alerts have\\nto exist for the inhibition to take effect."', args=[d.arg(name='source_matchers', type=d.T.array)]),
      withSource_matchers(source_matchers): { source_matchers: if std.isArray(v=source_matchers) then source_matchers else [source_matchers] },
      '#withSource_matchersMixin':: d.fn(help='"SourceMatchers defines a list of matchers for which one or more alerts have\\nto exist for the inhibition to take effect."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='source_matchers', type=d.T.array)]),
      withSource_matchersMixin(source_matchers): { source_matchers+: if std.isArray(v=source_matchers) then source_matchers else [source_matchers] },
      '#withTarget_matchers':: d.fn(help='"TargetMatchers defines a list of matchers that have to be fulfilled by the target\\nalerts to be muted."', args=[d.arg(name='target_matchers', type=d.T.array)]),
      withTarget_matchers(target_matchers): { target_matchers: if std.isArray(v=target_matchers) then target_matchers else [target_matchers] },
      '#withTarget_matchersMixin':: d.fn(help='"TargetMatchers defines a list of matchers that have to be fulfilled by the target\\nalerts to be muted."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='target_matchers', type=d.T.array)]),
      withTarget_matchersMixin(target_matchers): { target_matchers+: if std.isArray(v=target_matchers) then target_matchers else [target_matchers] },
    },
    '#receivers':: d.obj(help='"Receivers defines alert receivers"'),
    receivers: {
      '#discord_configs':: d.obj(help=''),
      discord_configs: {
        '#http_config':: d.obj(help='"HTTP client configuration."'),
        http_config: {
          '#authorization':: d.obj(help='"Authorization header configuration for the client.\\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."'),
          authorization: {
            '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
            credentials: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { authorization+: { credentials+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { authorization+: { credentials+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { authorization+: { credentials+: { optional: optional } } } },
            },
            '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
            withCredentialsFile(credentialsFile): { http_config+: { authorization+: { credentialsFile: credentialsFile } } },
            '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { http_config+: { authorization+: { type: type } } },
          },
          '#basic_auth':: d.obj(help='"BasicAuth for the client."'),
          basic_auth: {
            '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
            password: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { password+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { password+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { password+: { optional: optional } } } },
            },
            '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
            username: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { username+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { username+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { username+: { optional: optional } } } },
            },
            '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
            withPassword_file(password_file): { http_config+: { basic_auth+: { password_file: password_file } } },
          },
          '#bearer_token_secret':: d.obj(help="\"The secret's key that contains the bearer token\\nIt must be at them same namespace as CRD\""),
          bearer_token_secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { http_config+: { bearer_token_secret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { http_config+: { bearer_token_secret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { http_config+: { bearer_token_secret+: { optional: optional } } },
          },
          '#oauth2':: d.obj(help='"OAuth2 client credentials used to fetch a token for the targets."'),
          oauth2: {
            '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
            client_id: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
              },
            },
            '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
            client_secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { oauth2+: { client_secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { oauth2+: { client_secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { oauth2+: { client_secret+: { optional: optional } } } },
            },
            '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
            withClient_secret_file(client_secret_file): { http_config+: { oauth2+: { client_secret_file: client_secret_file } } },
            '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_params(endpoint_params): { http_config+: { oauth2+: { endpoint_params: endpoint_params } } },
            '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_paramsMixin(endpoint_params): { http_config+: { oauth2+: { endpoint_params+: endpoint_params } } },
            '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopes(scopes): { http_config+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopesMixin(scopes): { http_config+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
            withToken_url(token_url): { http_config+: { oauth2+: { token_url: token_url } } },
          },
          '#tls_config':: d.obj(help='"TLS configuration for the client."'),
          tls_config: {
            '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
            ca: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
              },
            },
            '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
            cert: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
              },
            },
            '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
            keySecret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { tls_config+: { keySecret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { tls_config+: { keySecret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { tls_config+: { keySecret+: { optional: optional } } } },
            },
            '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
            withCaFile(caFile): { http_config+: { tls_config+: { caFile: caFile } } },
            '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
            withCertFile(certFile): { http_config+: { tls_config+: { certFile: certFile } } },
            '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
            withInsecureSkipVerify(insecureSkipVerify): { http_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
            '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
            withKeyFile(keyFile): { http_config+: { tls_config+: { keyFile: keyFile } } },
            '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
            withServerName(serverName): { http_config+: { tls_config+: { serverName: serverName } } },
          },
          '#withBearer_token_file':: d.fn(help='"BearerTokenFile defines filename for bearer token, it must be mounted to pod."', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
          withBearer_token_file(bearer_token_file): { http_config+: { bearer_token_file: bearer_token_file } },
          '#withProxyURL':: d.fn(help='"Optional proxy URL."', args=[d.arg(name='proxyURL', type=d.T.string)]),
          withProxyURL(proxyURL): { http_config+: { proxyURL: proxyURL } },
        },
        '#webhook_url_secret':: d.obj(help='"URLSecret defines secret name and key at the CRD namespace.\\nIt must contain the webhook URL.\\none of `urlSecret` and `url` must be defined."'),
        webhook_url_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { webhook_url_secret+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { webhook_url_secret+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { webhook_url_secret+: { optional: optional } },
        },
        '#withMessage':: d.fn(help='"The message body template"', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withTitle':: d.fn(help='"The message title template"', args=[d.arg(name='title', type=d.T.string)]),
        withTitle(title): { title: title },
        '#withWebhook_url':: d.fn(help='"The discord webhook URL\\none of `urlSecret` and `url` must be defined."', args=[d.arg(name='webhook_url', type=d.T.string)]),
        withWebhook_url(webhook_url): { webhook_url: webhook_url },
      },
      '#email_configs':: d.obj(help='"EmailConfigs defines email notification configurations."'),
      email_configs: {
        '#auth_password':: d.obj(help='"AuthPassword defines secret name and key at CRD namespace."'),
        auth_password: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { auth_password+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { auth_password+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { auth_password+: { optional: optional } },
        },
        '#auth_secret':: d.obj(help='"AuthSecret defines secrent name and key at CRD namespace.\\nIt must contain the CRAM-MD5 secret."'),
        auth_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { auth_secret+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { auth_secret+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { auth_secret+: { optional: optional } },
        },
        '#tls_config':: d.obj(help='"TLS configuration"'),
        tls_config: {
          '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
          ca: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { tls_config+: { ca+: { configMap+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { tls_config+: { ca+: { configMap+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { tls_config+: { ca+: { configMap+: { optional: optional } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { tls_config+: { ca+: { secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { tls_config+: { ca+: { secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { tls_config+: { ca+: { secret+: { optional: optional } } } },
            },
          },
          '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
          cert: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { tls_config+: { cert+: { configMap+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { tls_config+: { cert+: { configMap+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { tls_config+: { cert+: { configMap+: { optional: optional } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { tls_config+: { cert+: { secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { tls_config+: { cert+: { secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { tls_config+: { cert+: { secret+: { optional: optional } } } },
            },
          },
          '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
          keySecret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tls_config+: { keySecret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tls_config+: { keySecret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tls_config+: { keySecret+: { optional: optional } } },
          },
          '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
          withCaFile(caFile): { tls_config+: { caFile: caFile } },
          '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
          withCertFile(certFile): { tls_config+: { certFile: certFile } },
          '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
          withInsecureSkipVerify(insecureSkipVerify): { tls_config+: { insecureSkipVerify: insecureSkipVerify } },
          '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
          withKeyFile(keyFile): { tls_config+: { keyFile: keyFile } },
          '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
          withServerName(serverName): { tls_config+: { serverName: serverName } },
        },
        '#withAuth_identity':: d.fn(help='"The identity to use for authentication."', args=[d.arg(name='auth_identity', type=d.T.string)]),
        withAuth_identity(auth_identity): { auth_identity: auth_identity },
        '#withAuth_username':: d.fn(help='"The username to use for authentication."', args=[d.arg(name='auth_username', type=d.T.string)]),
        withAuth_username(auth_username): { auth_username: auth_username },
        '#withFrom':: d.fn(help='"The sender address.\\nfallback to global setting if empty"', args=[d.arg(name='from', type=d.T.string)]),
        withFrom(from): { from: from },
        '#withHeaders':: d.fn(help='"Further headers email header key/value pairs. Overrides any headers\\npreviously set by the notification implementation."', args=[d.arg(name='headers', type=d.T.object)]),
        withHeaders(headers): { headers: headers },
        '#withHeadersMixin':: d.fn(help='"Further headers email header key/value pairs. Overrides any headers\\npreviously set by the notification implementation."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.object)]),
        withHeadersMixin(headers): { headers+: headers },
        '#withHello':: d.fn(help='"The hostname to identify to the SMTP server."', args=[d.arg(name='hello', type=d.T.string)]),
        withHello(hello): { hello: hello },
        '#withHtml':: d.fn(help='"The HTML body of the email notification."', args=[d.arg(name='html', type=d.T.string)]),
        withHtml(html): { html: html },
        '#withRequire_tls':: d.fn(help='"The SMTP TLS requirement.\\nNote that Go does not support unencrypted connections to remote SMTP endpoints."', args=[d.arg(name='require_tls', type=d.T.boolean)]),
        withRequire_tls(require_tls): { require_tls: require_tls },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withSmarthost':: d.fn(help='"The SMTP host through which emails are sent.\\nfallback to global setting if empty"', args=[d.arg(name='smarthost', type=d.T.string)]),
        withSmarthost(smarthost): { smarthost: smarthost },
        '#withText':: d.fn(help='"The text body of the email notification."', args=[d.arg(name='text', type=d.T.string)]),
        withText(text): { text: text },
        '#withTo':: d.fn(help='"The email address to send notifications to."', args=[d.arg(name='to', type=d.T.string)]),
        withTo(to): { to: to },
      },
      '#msteams_configs':: d.obj(help=''),
      msteams_configs: {
        '#http_config':: d.obj(help='"HTTP client configuration."'),
        http_config: {
          '#authorization':: d.obj(help='"Authorization header configuration for the client.\\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."'),
          authorization: {
            '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
            credentials: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { authorization+: { credentials+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { authorization+: { credentials+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { authorization+: { credentials+: { optional: optional } } } },
            },
            '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
            withCredentialsFile(credentialsFile): { http_config+: { authorization+: { credentialsFile: credentialsFile } } },
            '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { http_config+: { authorization+: { type: type } } },
          },
          '#basic_auth':: d.obj(help='"BasicAuth for the client."'),
          basic_auth: {
            '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
            password: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { password+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { password+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { password+: { optional: optional } } } },
            },
            '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
            username: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { username+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { username+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { username+: { optional: optional } } } },
            },
            '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
            withPassword_file(password_file): { http_config+: { basic_auth+: { password_file: password_file } } },
          },
          '#bearer_token_secret':: d.obj(help="\"The secret's key that contains the bearer token\\nIt must be at them same namespace as CRD\""),
          bearer_token_secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { http_config+: { bearer_token_secret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { http_config+: { bearer_token_secret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { http_config+: { bearer_token_secret+: { optional: optional } } },
          },
          '#oauth2':: d.obj(help='"OAuth2 client credentials used to fetch a token for the targets."'),
          oauth2: {
            '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
            client_id: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
              },
            },
            '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
            client_secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { oauth2+: { client_secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { oauth2+: { client_secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { oauth2+: { client_secret+: { optional: optional } } } },
            },
            '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
            withClient_secret_file(client_secret_file): { http_config+: { oauth2+: { client_secret_file: client_secret_file } } },
            '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_params(endpoint_params): { http_config+: { oauth2+: { endpoint_params: endpoint_params } } },
            '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_paramsMixin(endpoint_params): { http_config+: { oauth2+: { endpoint_params+: endpoint_params } } },
            '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopes(scopes): { http_config+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopesMixin(scopes): { http_config+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
            withToken_url(token_url): { http_config+: { oauth2+: { token_url: token_url } } },
          },
          '#tls_config':: d.obj(help='"TLS configuration for the client."'),
          tls_config: {
            '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
            ca: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
              },
            },
            '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
            cert: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
              },
            },
            '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
            keySecret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { tls_config+: { keySecret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { tls_config+: { keySecret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { tls_config+: { keySecret+: { optional: optional } } } },
            },
            '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
            withCaFile(caFile): { http_config+: { tls_config+: { caFile: caFile } } },
            '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
            withCertFile(certFile): { http_config+: { tls_config+: { certFile: certFile } } },
            '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
            withInsecureSkipVerify(insecureSkipVerify): { http_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
            '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
            withKeyFile(keyFile): { http_config+: { tls_config+: { keyFile: keyFile } } },
            '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
            withServerName(serverName): { http_config+: { tls_config+: { serverName: serverName } } },
          },
          '#withBearer_token_file':: d.fn(help='"BearerTokenFile defines filename for bearer token, it must be mounted to pod."', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
          withBearer_token_file(bearer_token_file): { http_config+: { bearer_token_file: bearer_token_file } },
          '#withProxyURL':: d.fn(help='"Optional proxy URL."', args=[d.arg(name='proxyURL', type=d.T.string)]),
          withProxyURL(proxyURL): { http_config+: { proxyURL: proxyURL } },
        },
        '#webhook_url_secret':: d.obj(help='"URLSecret defines secret name and key at the CRD namespace.\\nIt must contain the webhook URL.\\none of `urlSecret` and `url` must be defined."'),
        webhook_url_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { webhook_url_secret+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { webhook_url_secret+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { webhook_url_secret+: { optional: optional } },
        },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withText':: d.fn(help='"The text body of the teams notification."', args=[d.arg(name='text', type=d.T.string)]),
        withText(text): { text: text },
        '#withTitle':: d.fn(help='"The title of the teams notification."', args=[d.arg(name='title', type=d.T.string)]),
        withTitle(title): { title: title },
        '#withWebhook_url':: d.fn(help='"The incoming webhook URL\\none of `urlSecret` and `url` must be defined."', args=[d.arg(name='webhook_url', type=d.T.string)]),
        withWebhook_url(webhook_url): { webhook_url: webhook_url },
      },
      '#opsgenie_configs':: d.obj(help='"OpsGenieConfigs defines ops genie notification configurations."'),
      opsgenie_configs: {
        '#api_key':: d.obj(help="\"The secret's key that contains the OpsGenie API key.\\nIt must be at them same namespace as CRD\\nfallback to global setting if empty\""),
        api_key: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { api_key+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { api_key+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { api_key+: { optional: optional } },
        },
        '#responders':: d.obj(help='"List of responders responsible for notifications."'),
        responders: {
          '#withId':: d.fn(help='"ID of the responder."', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { id: id },
          '#withName':: d.fn(help='"Name of the responder."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withType':: d.fn(help='"Type of responder."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
          '#withUsername':: d.fn(help='"Username of the responder."', args=[d.arg(name='username', type=d.T.string)]),
          withUsername(username): { username: username },
        },
        '#withActions':: d.fn(help='"Comma separated list of actions that will be available for the alert."', args=[d.arg(name='actions', type=d.T.string)]),
        withActions(actions): { actions: actions },
        '#withApiURL':: d.fn(help='"The URL to send OpsGenie API requests to."', args=[d.arg(name='apiURL', type=d.T.string)]),
        withApiURL(apiURL): { apiURL: apiURL },
        '#withDescription':: d.fn(help='"Description of the incident."', args=[d.arg(name='description', type=d.T.string)]),
        withDescription(description): { description: description },
        '#withDetails':: d.fn(help='"A set of arbitrary key/value pairs that provide further detail about the incident."', args=[d.arg(name='details', type=d.T.object)]),
        withDetails(details): { details: details },
        '#withDetailsMixin':: d.fn(help='"A set of arbitrary key/value pairs that provide further detail about the incident."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='details', type=d.T.object)]),
        withDetailsMixin(details): { details+: details },
        '#withEntity':: d.fn(help='"Optional field that can be used to specify which domain alert is related to."', args=[d.arg(name='entity', type=d.T.string)]),
        withEntity(entity): { entity: entity },
        '#withHttp_config':: d.fn(help='"HTTP client configuration."', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_config(http_config): { http_config: http_config },
        '#withHttp_configMixin':: d.fn(help='"HTTP client configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_configMixin(http_config): { http_config+: http_config },
        '#withMessage':: d.fn(help='"Alert text limited to 130 characters."', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withNote':: d.fn(help='"Additional alert note."', args=[d.arg(name='note', type=d.T.string)]),
        withNote(note): { note: note },
        '#withPriority':: d.fn(help='"Priority level of alert. Possible values are P1, P2, P3, P4, and P5."', args=[d.arg(name='priority', type=d.T.string)]),
        withPriority(priority): { priority: priority },
        '#withResponders':: d.fn(help='"List of responders responsible for notifications."', args=[d.arg(name='responders', type=d.T.array)]),
        withResponders(responders): { responders: if std.isArray(v=responders) then responders else [responders] },
        '#withRespondersMixin':: d.fn(help='"List of responders responsible for notifications."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='responders', type=d.T.array)]),
        withRespondersMixin(responders): { responders+: if std.isArray(v=responders) then responders else [responders] },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withSource':: d.fn(help='"Backlink to the sender of the notification."', args=[d.arg(name='source', type=d.T.string)]),
        withSource(source): { source: source },
        '#withTags':: d.fn(help='"Comma separated list of tags attached to the notifications."', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { tags: tags },
        '#withUpdate_alerts':: d.fn(help='"Whether to update message and description of the alert in OpsGenie if it already exists\\nBy default, the alert is never updated in OpsGenie, the new message only appears in activity log."', args=[d.arg(name='update_alerts', type=d.T.boolean)]),
        withUpdate_alerts(update_alerts): { update_alerts: update_alerts },
      },
      '#pagerduty_configs':: d.obj(help='"PagerDutyConfigs defines pager duty notification configurations."'),
      pagerduty_configs: {
        '#images':: d.obj(help='"Images to attach to the incident."'),
        images: {
          '#withAlt':: d.fn(help='', args=[d.arg(name='alt', type=d.T.string)]),
          withAlt(alt): { alt: alt },
          '#withHref':: d.fn(help='', args=[d.arg(name='href', type=d.T.string)]),
          withHref(href): { href: href },
          '#withSource':: d.fn(help='', args=[d.arg(name='source', type=d.T.string)]),
          withSource(source): { source: source },
        },
        '#links':: d.obj(help='"Links to attach to the incident."'),
        links: {
          '#withHref':: d.fn(help='', args=[d.arg(name='href', type=d.T.string)]),
          withHref(href): { href: href },
          '#withText':: d.fn(help='', args=[d.arg(name='text', type=d.T.string)]),
          withText(text): { text: text },
        },
        '#routing_key':: d.obj(help="\"The secret's key that contains the PagerDuty integration key (when using\\nEvents API v2). Either this field or `serviceKey` needs to be defined.\\nIt must be at them same namespace as CRD\""),
        routing_key: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { routing_key+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { routing_key+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { routing_key+: { optional: optional } },
        },
        '#service_key':: d.obj(help="\"The secret's key that contains the PagerDuty service key (when using\\nintegration type \\\"Prometheus\\\"). Either this field or `routingKey` needs to\\nbe defined.\\nIt must be at them same namespace as CRD\""),
        service_key: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { service_key+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { service_key+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { service_key+: { optional: optional } },
        },
        '#withClass':: d.fn(help='"The class/type of the event."', args=[d.arg(name='class', type=d.T.string)]),
        withClass(class): { class: class },
        '#withClient':: d.fn(help='"Client identification."', args=[d.arg(name='client', type=d.T.string)]),
        withClient(client): { client: client },
        '#withClient_url':: d.fn(help='"Backlink to the sender of notification."', args=[d.arg(name='client_url', type=d.T.string)]),
        withClient_url(client_url): { client_url: client_url },
        '#withComponent':: d.fn(help='"The part or component of the affected system that is broken."', args=[d.arg(name='component', type=d.T.string)]),
        withComponent(component): { component: component },
        '#withDescription':: d.fn(help='"Description of the incident."', args=[d.arg(name='description', type=d.T.string)]),
        withDescription(description): { description: description },
        '#withDetails':: d.fn(help='"Arbitrary key/value pairs that provide further detail about the incident."', args=[d.arg(name='details', type=d.T.object)]),
        withDetails(details): { details: details },
        '#withDetailsMixin':: d.fn(help='"Arbitrary key/value pairs that provide further detail about the incident."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='details', type=d.T.object)]),
        withDetailsMixin(details): { details+: details },
        '#withGroup':: d.fn(help='"A cluster or grouping of sources."', args=[d.arg(name='group', type=d.T.string)]),
        withGroup(group): { group: group },
        '#withHttp_config':: d.fn(help='"HTTP client configuration."', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_config(http_config): { http_config: http_config },
        '#withHttp_configMixin':: d.fn(help='"HTTP client configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_configMixin(http_config): { http_config+: http_config },
        '#withImages':: d.fn(help='"Images to attach to the incident."', args=[d.arg(name='images', type=d.T.array)]),
        withImages(images): { images: if std.isArray(v=images) then images else [images] },
        '#withImagesMixin':: d.fn(help='"Images to attach to the incident."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='images', type=d.T.array)]),
        withImagesMixin(images): { images+: if std.isArray(v=images) then images else [images] },
        '#withLinks':: d.fn(help='"Links to attach to the incident."', args=[d.arg(name='links', type=d.T.array)]),
        withLinks(links): { links: if std.isArray(v=links) then links else [links] },
        '#withLinksMixin':: d.fn(help='"Links to attach to the incident."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='links', type=d.T.array)]),
        withLinksMixin(links): { links+: if std.isArray(v=links) then links else [links] },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withSeverity':: d.fn(help='"Severity of the incident."', args=[d.arg(name='severity', type=d.T.string)]),
        withSeverity(severity): { severity: severity },
        '#withUrl':: d.fn(help='"The URL to send requests to."', args=[d.arg(name='url', type=d.T.string)]),
        withUrl(url): { url: url },
      },
      '#pushover_configs':: d.obj(help='"PushoverConfigs defines push over notification configurations."'),
      pushover_configs: {
        '#token':: d.obj(help="\"The secret's key that contains the registered application’s API token, see https://pushover.net/apps.\\nIt must be at them same namespace as CRD\""),
        token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { token+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { token+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { token+: { optional: optional } },
        },
        '#user_key':: d.obj(help="\"The secret's key that contains the recipient user’s user key.\\nIt must be at them same namespace as CRD\""),
        user_key: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { user_key+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { user_key+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { user_key+: { optional: optional } },
        },
        '#withExpire':: d.fn(help='"How long your notification will continue to be retried for, unless the user\\nacknowledges the notification."', args=[d.arg(name='expire', type=d.T.string)]),
        withExpire(expire): { expire: expire },
        '#withHtml':: d.fn(help='"Whether notification message is HTML or plain text."', args=[d.arg(name='html', type=d.T.boolean)]),
        withHtml(html): { html: html },
        '#withHttp_config':: d.fn(help='"HTTP client configuration."', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_config(http_config): { http_config: http_config },
        '#withHttp_configMixin':: d.fn(help='"HTTP client configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_configMixin(http_config): { http_config+: http_config },
        '#withMessage':: d.fn(help='"Notification message."', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withPriority':: d.fn(help='"Priority, see https://pushover.net/api#priority"', args=[d.arg(name='priority', type=d.T.string)]),
        withPriority(priority): { priority: priority },
        '#withRetry':: d.fn(help='"How often the Pushover servers will send the same notification to the user.\\nMust be at least 30 seconds."', args=[d.arg(name='retry', type=d.T.string)]),
        withRetry(retry): { retry: retry },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withSound':: d.fn(help="\"The name of one of the sounds supported by device clients to override the user's default sound choice\"", args=[d.arg(name='sound', type=d.T.string)]),
        withSound(sound): { sound: sound },
        '#withTitle':: d.fn(help='"Notification title."', args=[d.arg(name='title', type=d.T.string)]),
        withTitle(title): { title: title },
        '#withUrl':: d.fn(help='"A supplementary URL shown alongside the message."', args=[d.arg(name='url', type=d.T.string)]),
        withUrl(url): { url: url },
        '#withUrl_title':: d.fn(help='"A title for supplementary URL, otherwise just the URL is shown"', args=[d.arg(name='url_title', type=d.T.string)]),
        withUrl_title(url_title): { url_title: url_title },
      },
      '#slack_configs':: d.obj(help='"SlackConfigs defines slack notification configurations."'),
      slack_configs: {
        '#actions':: d.obj(help='"A list of Slack actions that are sent with each notification."'),
        actions: {
          '#confirm':: d.obj(help='"SlackConfirmationField protect users from destructive actions or\\nparticularly distinguished decisions by asking them to confirm their button\\nclick one more time.\\nSee https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields\\nfor more information."'),
          confirm: {
            '#withDismiss_text':: d.fn(help='', args=[d.arg(name='dismiss_text', type=d.T.string)]),
            withDismiss_text(dismiss_text): { confirm+: { dismiss_text: dismiss_text } },
            '#withOk_text':: d.fn(help='', args=[d.arg(name='ok_text', type=d.T.string)]),
            withOk_text(ok_text): { confirm+: { ok_text: ok_text } },
            '#withText':: d.fn(help='', args=[d.arg(name='text', type=d.T.string)]),
            withText(text): { confirm+: { text: text } },
            '#withTitle':: d.fn(help='', args=[d.arg(name='title', type=d.T.string)]),
            withTitle(title): { confirm+: { title: title } },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withStyle':: d.fn(help='', args=[d.arg(name='style', type=d.T.string)]),
          withStyle(style): { style: style },
          '#withText':: d.fn(help='', args=[d.arg(name='text', type=d.T.string)]),
          withText(text): { text: text },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
          '#withUrl':: d.fn(help='', args=[d.arg(name='url', type=d.T.string)]),
          withUrl(url): { url: url },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#api_url':: d.obj(help="\"The secret's key that contains the Slack webhook URL.\\nIt must be at them same namespace as CRD\\nfallback to global setting if empty\""),
        api_url: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { api_url+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { api_url+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { api_url+: { optional: optional } },
        },
        '#fields':: d.obj(help='"A list of Slack fields that are sent with each notification."'),
        fields: {
          '#withShort':: d.fn(help='', args=[d.arg(name='short', type=d.T.boolean)]),
          withShort(short): { short: short },
          '#withTitle':: d.fn(help='', args=[d.arg(name='title', type=d.T.string)]),
          withTitle(title): { title: title },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withActions':: d.fn(help='"A list of Slack actions that are sent with each notification."', args=[d.arg(name='actions', type=d.T.array)]),
        withActions(actions): { actions: if std.isArray(v=actions) then actions else [actions] },
        '#withActionsMixin':: d.fn(help='"A list of Slack actions that are sent with each notification."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='actions', type=d.T.array)]),
        withActionsMixin(actions): { actions+: if std.isArray(v=actions) then actions else [actions] },
        '#withCallback_id':: d.fn(help='', args=[d.arg(name='callback_id', type=d.T.string)]),
        withCallback_id(callback_id): { callback_id: callback_id },
        '#withChannel':: d.fn(help='"The channel or user to send notifications to."', args=[d.arg(name='channel', type=d.T.string)]),
        withChannel(channel): { channel: channel },
        '#withColor':: d.fn(help='', args=[d.arg(name='color', type=d.T.string)]),
        withColor(color): { color: color },
        '#withFallback':: d.fn(help='', args=[d.arg(name='fallback', type=d.T.string)]),
        withFallback(fallback): { fallback: fallback },
        '#withFields':: d.fn(help='"A list of Slack fields that are sent with each notification."', args=[d.arg(name='fields', type=d.T.array)]),
        withFields(fields): { fields: if std.isArray(v=fields) then fields else [fields] },
        '#withFieldsMixin':: d.fn(help='"A list of Slack fields that are sent with each notification."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fields', type=d.T.array)]),
        withFieldsMixin(fields): { fields+: if std.isArray(v=fields) then fields else [fields] },
        '#withFooter':: d.fn(help='', args=[d.arg(name='footer', type=d.T.string)]),
        withFooter(footer): { footer: footer },
        '#withHttp_config':: d.fn(help='"HTTP client configuration."', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_config(http_config): { http_config: http_config },
        '#withHttp_configMixin':: d.fn(help='"HTTP client configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_configMixin(http_config): { http_config+: http_config },
        '#withIcon_emoji':: d.fn(help='', args=[d.arg(name='icon_emoji', type=d.T.string)]),
        withIcon_emoji(icon_emoji): { icon_emoji: icon_emoji },
        '#withIcon_url':: d.fn(help='', args=[d.arg(name='icon_url', type=d.T.string)]),
        withIcon_url(icon_url): { icon_url: icon_url },
        '#withImage_url':: d.fn(help='', args=[d.arg(name='image_url', type=d.T.string)]),
        withImage_url(image_url): { image_url: image_url },
        '#withLink_names':: d.fn(help='', args=[d.arg(name='link_names', type=d.T.boolean)]),
        withLink_names(link_names): { link_names: link_names },
        '#withMrkdwn_in':: d.fn(help='', args=[d.arg(name='mrkdwn_in', type=d.T.array)]),
        withMrkdwn_in(mrkdwn_in): { mrkdwn_in: if std.isArray(v=mrkdwn_in) then mrkdwn_in else [mrkdwn_in] },
        '#withMrkdwn_inMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mrkdwn_in', type=d.T.array)]),
        withMrkdwn_inMixin(mrkdwn_in): { mrkdwn_in+: if std.isArray(v=mrkdwn_in) then mrkdwn_in else [mrkdwn_in] },
        '#withPretext':: d.fn(help='', args=[d.arg(name='pretext', type=d.T.string)]),
        withPretext(pretext): { pretext: pretext },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withShort_fields':: d.fn(help='', args=[d.arg(name='short_fields', type=d.T.boolean)]),
        withShort_fields(short_fields): { short_fields: short_fields },
        '#withText':: d.fn(help='', args=[d.arg(name='text', type=d.T.string)]),
        withText(text): { text: text },
        '#withThumb_url':: d.fn(help='', args=[d.arg(name='thumb_url', type=d.T.string)]),
        withThumb_url(thumb_url): { thumb_url: thumb_url },
        '#withTitle':: d.fn(help='', args=[d.arg(name='title', type=d.T.string)]),
        withTitle(title): { title: title },
        '#withTitle_link':: d.fn(help='', args=[d.arg(name='title_link', type=d.T.string)]),
        withTitle_link(title_link): { title_link: title_link },
        '#withUsername':: d.fn(help='', args=[d.arg(name='username', type=d.T.string)]),
        withUsername(username): { username: username },
      },
      '#sns_configs':: d.obj(help=''),
      sns_configs: {
        '#http_config':: d.obj(help='"HTTP client configuration."'),
        http_config: {
          '#authorization':: d.obj(help='"Authorization header configuration for the client.\\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."'),
          authorization: {
            '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
            credentials: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { authorization+: { credentials+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { authorization+: { credentials+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { authorization+: { credentials+: { optional: optional } } } },
            },
            '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
            withCredentialsFile(credentialsFile): { http_config+: { authorization+: { credentialsFile: credentialsFile } } },
            '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { http_config+: { authorization+: { type: type } } },
          },
          '#basic_auth':: d.obj(help='"BasicAuth for the client."'),
          basic_auth: {
            '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
            password: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { password+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { password+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { password+: { optional: optional } } } },
            },
            '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
            username: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { username+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { username+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { username+: { optional: optional } } } },
            },
            '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
            withPassword_file(password_file): { http_config+: { basic_auth+: { password_file: password_file } } },
          },
          '#bearer_token_secret':: d.obj(help="\"The secret's key that contains the bearer token\\nIt must be at them same namespace as CRD\""),
          bearer_token_secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { http_config+: { bearer_token_secret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { http_config+: { bearer_token_secret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { http_config+: { bearer_token_secret+: { optional: optional } } },
          },
          '#oauth2':: d.obj(help='"OAuth2 client credentials used to fetch a token for the targets."'),
          oauth2: {
            '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
            client_id: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
              },
            },
            '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
            client_secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { oauth2+: { client_secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { oauth2+: { client_secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { oauth2+: { client_secret+: { optional: optional } } } },
            },
            '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
            withClient_secret_file(client_secret_file): { http_config+: { oauth2+: { client_secret_file: client_secret_file } } },
            '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_params(endpoint_params): { http_config+: { oauth2+: { endpoint_params: endpoint_params } } },
            '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_paramsMixin(endpoint_params): { http_config+: { oauth2+: { endpoint_params+: endpoint_params } } },
            '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopes(scopes): { http_config+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopesMixin(scopes): { http_config+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
            withToken_url(token_url): { http_config+: { oauth2+: { token_url: token_url } } },
          },
          '#tls_config':: d.obj(help='"TLS configuration for the client."'),
          tls_config: {
            '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
            ca: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
              },
            },
            '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
            cert: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
              },
            },
            '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
            keySecret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { tls_config+: { keySecret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { tls_config+: { keySecret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { tls_config+: { keySecret+: { optional: optional } } } },
            },
            '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
            withCaFile(caFile): { http_config+: { tls_config+: { caFile: caFile } } },
            '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
            withCertFile(certFile): { http_config+: { tls_config+: { certFile: certFile } } },
            '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
            withInsecureSkipVerify(insecureSkipVerify): { http_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
            '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
            withKeyFile(keyFile): { http_config+: { tls_config+: { keyFile: keyFile } } },
            '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
            withServerName(serverName): { http_config+: { tls_config+: { serverName: serverName } } },
          },
          '#withBearer_token_file':: d.fn(help='"BearerTokenFile defines filename for bearer token, it must be mounted to pod."', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
          withBearer_token_file(bearer_token_file): { http_config+: { bearer_token_file: bearer_token_file } },
          '#withProxyURL':: d.fn(help='"Optional proxy URL."', args=[d.arg(name='proxyURL', type=d.T.string)]),
          withProxyURL(proxyURL): { http_config+: { proxyURL: proxyURL } },
        },
        '#sigv4':: d.obj(help='"Configure the AWS Signature Verification 4 signing process"'),
        sigv4: {
          '#access_key_selector':: d.obj(help='"secret key selector to get the keys from a Kubernetes Secret"'),
          access_key_selector: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { sigv4+: { access_key_selector+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { sigv4+: { access_key_selector+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { sigv4+: { access_key_selector+: { optional: optional } } },
          },
          '#secret_key_selector':: d.obj(help='"secret key selector to get the keys from a Kubernetes Secret"'),
          secret_key_selector: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { sigv4+: { secret_key_selector+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { sigv4+: { secret_key_selector+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { sigv4+: { secret_key_selector+: { optional: optional } } },
          },
          '#withAccess_key':: d.fn(help='"The AWS API keys. Both access_key and secret_key must be supplied or both must be blank.\\nIf blank the environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` are used."', args=[d.arg(name='access_key', type=d.T.string)]),
          withAccess_key(access_key): { sigv4+: { access_key: access_key } },
          '#withProfile':: d.fn(help='"Named AWS profile used to authenticate"', args=[d.arg(name='profile', type=d.T.string)]),
          withProfile(profile): { sigv4+: { profile: profile } },
          '#withRegion':: d.fn(help='"AWS region, if blank the region from the default credentials chain is used"', args=[d.arg(name='region', type=d.T.string)]),
          withRegion(region): { sigv4+: { region: region } },
          '#withRole_arn':: d.fn(help='"AWS Role ARN, an alternative to using AWS API keys"', args=[d.arg(name='role_arn', type=d.T.string)]),
          withRole_arn(role_arn): { sigv4+: { role_arn: role_arn } },
        },
        '#withApi_url':: d.fn(help='"The api URL"', args=[d.arg(name='api_url', type=d.T.string)]),
        withApi_url(api_url): { api_url: api_url },
        '#withAttributes':: d.fn(help='"SNS message attributes"', args=[d.arg(name='attributes', type=d.T.object)]),
        withAttributes(attributes): { attributes: attributes },
        '#withAttributesMixin':: d.fn(help='"SNS message attributes"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='attributes', type=d.T.object)]),
        withAttributesMixin(attributes): { attributes+: attributes },
        '#withMessage':: d.fn(help='"The message content of the SNS notification."', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withPhone_number':: d.fn(help='"Phone number if message is delivered via SMS\\nSpecify this, topic_arn or target_arn"', args=[d.arg(name='phone_number', type=d.T.string)]),
        withPhone_number(phone_number): { phone_number: phone_number },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withSubject':: d.fn(help='"The subject line if message is delivered to an email endpoint."', args=[d.arg(name='subject', type=d.T.string)]),
        withSubject(subject): { subject: subject },
        '#withTarget_arn':: d.fn(help='"Mobile platform endpoint ARN if message is delivered via mobile notifications\\nSpecify this, topic_arn or phone_number"', args=[d.arg(name='target_arn', type=d.T.string)]),
        withTarget_arn(target_arn): { target_arn: target_arn },
        '#withTopic_arn':: d.fn(help='"SNS topic ARN, either specify this, phone_number or target_arn"', args=[d.arg(name='topic_arn', type=d.T.string)]),
        withTopic_arn(topic_arn): { topic_arn: topic_arn },
      },
      '#telegram_configs':: d.obj(help=''),
      telegram_configs: {
        '#bot_token':: d.obj(help='"BotToken token for the bot\\nhttps://core.telegram.org/bots/api"'),
        bot_token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { bot_token+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { bot_token+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { bot_token+: { optional: optional } },
        },
        '#withApi_url':: d.fn(help='"APIUrl the Telegram API URL i.e. https://api.telegram.org."', args=[d.arg(name='api_url', type=d.T.string)]),
        withApi_url(api_url): { api_url: api_url },
        '#withChat_id':: d.fn(help='"ChatID is ID of the chat where to send the messages."', args=[d.arg(name='chat_id', type=d.T.integer)]),
        withChat_id(chat_id): { chat_id: chat_id },
        '#withDisable_notifications':: d.fn(help='"DisableNotifications"', args=[d.arg(name='disable_notifications', type=d.T.boolean)]),
        withDisable_notifications(disable_notifications): { disable_notifications: disable_notifications },
        '#withHttp_config':: d.fn(help='"HTTP client configuration."', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_config(http_config): { http_config: http_config },
        '#withHttp_configMixin':: d.fn(help='"HTTP client configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_configMixin(http_config): { http_config+: http_config },
        '#withMessage':: d.fn(help='"Message is templated message"', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withParse_mode':: d.fn(help='"ParseMode for telegram message,\\nsupported values are MarkdownV2, Markdown, Markdown and empty string for plain text."', args=[d.arg(name='parse_mode', type=d.T.string)]),
        withParse_mode(parse_mode): { parse_mode: parse_mode },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
      },
      '#victorops_configs':: d.obj(help='"VictorOpsConfigs defines victor ops notification configurations."'),
      victorops_configs: {
        '#api_key':: d.obj(help="\"The secret's key that contains the API key to use when talking to the VictorOps API.\\nIt must be at them same namespace as CRD\\nfallback to global setting if empty\""),
        api_key: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { api_key+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { api_key+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { api_key+: { optional: optional } },
        },
        '#http_config':: d.obj(help="\"The HTTP client's configuration.\""),
        http_config: {
          '#authorization':: d.obj(help='"Authorization header configuration for the client.\\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."'),
          authorization: {
            '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
            credentials: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { authorization+: { credentials+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { authorization+: { credentials+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { authorization+: { credentials+: { optional: optional } } } },
            },
            '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
            withCredentialsFile(credentialsFile): { http_config+: { authorization+: { credentialsFile: credentialsFile } } },
            '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { http_config+: { authorization+: { type: type } } },
          },
          '#basic_auth':: d.obj(help='"BasicAuth for the client."'),
          basic_auth: {
            '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
            password: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { password+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { password+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { password+: { optional: optional } } } },
            },
            '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
            username: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { username+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { username+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { username+: { optional: optional } } } },
            },
            '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
            withPassword_file(password_file): { http_config+: { basic_auth+: { password_file: password_file } } },
          },
          '#bearer_token_secret':: d.obj(help="\"The secret's key that contains the bearer token\\nIt must be at them same namespace as CRD\""),
          bearer_token_secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { http_config+: { bearer_token_secret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { http_config+: { bearer_token_secret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { http_config+: { bearer_token_secret+: { optional: optional } } },
          },
          '#oauth2':: d.obj(help='"OAuth2 client credentials used to fetch a token for the targets."'),
          oauth2: {
            '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
            client_id: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
              },
            },
            '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
            client_secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { oauth2+: { client_secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { oauth2+: { client_secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { oauth2+: { client_secret+: { optional: optional } } } },
            },
            '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
            withClient_secret_file(client_secret_file): { http_config+: { oauth2+: { client_secret_file: client_secret_file } } },
            '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_params(endpoint_params): { http_config+: { oauth2+: { endpoint_params: endpoint_params } } },
            '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_paramsMixin(endpoint_params): { http_config+: { oauth2+: { endpoint_params+: endpoint_params } } },
            '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopes(scopes): { http_config+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopesMixin(scopes): { http_config+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
            withToken_url(token_url): { http_config+: { oauth2+: { token_url: token_url } } },
          },
          '#tls_config':: d.obj(help='"TLS configuration for the client."'),
          tls_config: {
            '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
            ca: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
              },
            },
            '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
            cert: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
              },
            },
            '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
            keySecret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { tls_config+: { keySecret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { tls_config+: { keySecret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { tls_config+: { keySecret+: { optional: optional } } } },
            },
            '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
            withCaFile(caFile): { http_config+: { tls_config+: { caFile: caFile } } },
            '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
            withCertFile(certFile): { http_config+: { tls_config+: { certFile: certFile } } },
            '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
            withInsecureSkipVerify(insecureSkipVerify): { http_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
            '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
            withKeyFile(keyFile): { http_config+: { tls_config+: { keyFile: keyFile } } },
            '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
            withServerName(serverName): { http_config+: { tls_config+: { serverName: serverName } } },
          },
          '#withBearer_token_file':: d.fn(help='"BearerTokenFile defines filename for bearer token, it must be mounted to pod."', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
          withBearer_token_file(bearer_token_file): { http_config+: { bearer_token_file: bearer_token_file } },
          '#withProxyURL':: d.fn(help='"Optional proxy URL."', args=[d.arg(name='proxyURL', type=d.T.string)]),
          withProxyURL(proxyURL): { http_config+: { proxyURL: proxyURL } },
        },
        '#withApi_url':: d.fn(help='"The VictorOps API URL."', args=[d.arg(name='api_url', type=d.T.string)]),
        withApi_url(api_url): { api_url: api_url },
        '#withCustom_fields':: d.fn(help='"Adds optional custom fields\\nhttps://github.com/prometheus/alertmanager/blob/v0.24.0/config/notifiers.go#L537"', args=[d.arg(name='custom_fields', type=d.T.object)]),
        withCustom_fields(custom_fields): { custom_fields: custom_fields },
        '#withCustom_fieldsMixin':: d.fn(help='"Adds optional custom fields\\nhttps://github.com/prometheus/alertmanager/blob/v0.24.0/config/notifiers.go#L537"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='custom_fields', type=d.T.object)]),
        withCustom_fieldsMixin(custom_fields): { custom_fields+: custom_fields },
        '#withEntity_display_name':: d.fn(help='"Contains summary of the alerted problem."', args=[d.arg(name='entity_display_name', type=d.T.string)]),
        withEntity_display_name(entity_display_name): { entity_display_name: entity_display_name },
        '#withMessage_type':: d.fn(help='"Describes the behavior of the alert (CRITICAL, WARNING, INFO)."', args=[d.arg(name='message_type', type=d.T.string)]),
        withMessage_type(message_type): { message_type: message_type },
        '#withMonitoring_tool':: d.fn(help='"The monitoring tool the state message is from."', args=[d.arg(name='monitoring_tool', type=d.T.string)]),
        withMonitoring_tool(monitoring_tool): { monitoring_tool: monitoring_tool },
        '#withRouting_key':: d.fn(help='"A key used to map the alert to a team."', args=[d.arg(name='routing_key', type=d.T.string)]),
        withRouting_key(routing_key): { routing_key: routing_key },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withState_message':: d.fn(help='"Contains long explanation of the alerted problem."', args=[d.arg(name='state_message', type=d.T.string)]),
        withState_message(state_message): { state_message: state_message },
      },
      '#webex_configs':: d.obj(help=''),
      webex_configs: {
        '#http_config':: d.obj(help='"HTTP client configuration. You must use this configuration to supply the bot token as part of the HTTP `Authorization` header."'),
        http_config: {
          '#authorization':: d.obj(help='"Authorization header configuration for the client.\\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."'),
          authorization: {
            '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
            credentials: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { authorization+: { credentials+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { authorization+: { credentials+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { authorization+: { credentials+: { optional: optional } } } },
            },
            '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
            withCredentialsFile(credentialsFile): { http_config+: { authorization+: { credentialsFile: credentialsFile } } },
            '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { http_config+: { authorization+: { type: type } } },
          },
          '#basic_auth':: d.obj(help='"BasicAuth for the client."'),
          basic_auth: {
            '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
            password: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { password+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { password+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { password+: { optional: optional } } } },
            },
            '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
            username: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { username+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { username+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { username+: { optional: optional } } } },
            },
            '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
            withPassword_file(password_file): { http_config+: { basic_auth+: { password_file: password_file } } },
          },
          '#bearer_token_secret':: d.obj(help="\"The secret's key that contains the bearer token\\nIt must be at them same namespace as CRD\""),
          bearer_token_secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { http_config+: { bearer_token_secret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { http_config+: { bearer_token_secret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { http_config+: { bearer_token_secret+: { optional: optional } } },
          },
          '#oauth2':: d.obj(help='"OAuth2 client credentials used to fetch a token for the targets."'),
          oauth2: {
            '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
            client_id: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
              },
            },
            '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
            client_secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { oauth2+: { client_secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { oauth2+: { client_secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { oauth2+: { client_secret+: { optional: optional } } } },
            },
            '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
            withClient_secret_file(client_secret_file): { http_config+: { oauth2+: { client_secret_file: client_secret_file } } },
            '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_params(endpoint_params): { http_config+: { oauth2+: { endpoint_params: endpoint_params } } },
            '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_paramsMixin(endpoint_params): { http_config+: { oauth2+: { endpoint_params+: endpoint_params } } },
            '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopes(scopes): { http_config+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopesMixin(scopes): { http_config+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
            withToken_url(token_url): { http_config+: { oauth2+: { token_url: token_url } } },
          },
          '#tls_config':: d.obj(help='"TLS configuration for the client."'),
          tls_config: {
            '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
            ca: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
              },
            },
            '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
            cert: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
              },
            },
            '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
            keySecret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { tls_config+: { keySecret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { tls_config+: { keySecret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { tls_config+: { keySecret+: { optional: optional } } } },
            },
            '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
            withCaFile(caFile): { http_config+: { tls_config+: { caFile: caFile } } },
            '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
            withCertFile(certFile): { http_config+: { tls_config+: { certFile: certFile } } },
            '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
            withInsecureSkipVerify(insecureSkipVerify): { http_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
            '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
            withKeyFile(keyFile): { http_config+: { tls_config+: { keyFile: keyFile } } },
            '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
            withServerName(serverName): { http_config+: { tls_config+: { serverName: serverName } } },
          },
          '#withBearer_token_file':: d.fn(help='"BearerTokenFile defines filename for bearer token, it must be mounted to pod."', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
          withBearer_token_file(bearer_token_file): { http_config+: { bearer_token_file: bearer_token_file } },
          '#withProxyURL':: d.fn(help='"Optional proxy URL."', args=[d.arg(name='proxyURL', type=d.T.string)]),
          withProxyURL(proxyURL): { http_config+: { proxyURL: proxyURL } },
        },
        '#withApi_url':: d.fn(help='"The Webex Teams API URL, i.e. https://webexapis.com/v1/messages"', args=[d.arg(name='api_url', type=d.T.string)]),
        withApi_url(api_url): { api_url: api_url },
        '#withMessage':: d.fn(help='"The message body template"', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withRoom_id':: d.fn(help='"The ID of the Webex Teams room where to send the messages"', args=[d.arg(name='room_id', type=d.T.string)]),
        withRoom_id(room_id): { room_id: room_id },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
      },
      '#webhook_configs':: d.obj(help='"WebhookConfigs defines webhook notification configurations."'),
      webhook_configs: {
        '#url_secret':: d.obj(help='"URLSecret defines secret name and key at the CRD namespace.\\nIt must contain the webhook URL.\\none of `urlSecret` and `url` must be defined."'),
        url_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { url_secret+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { url_secret+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { url_secret+: { optional: optional } },
        },
        '#withHttp_config':: d.fn(help='"HTTP client configuration."', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_config(http_config): { http_config: http_config },
        '#withHttp_configMixin':: d.fn(help='"HTTP client configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='http_config', type=d.T.object)]),
        withHttp_configMixin(http_config): { http_config+: http_config },
        '#withMax_alerts':: d.fn(help='"Maximum number of alerts to be sent per webhook message. When 0, all alerts are included."', args=[d.arg(name='max_alerts', type=d.T.integer)]),
        withMax_alerts(max_alerts): { max_alerts: max_alerts },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withUrl':: d.fn(help='"URL to send requests to,\\none of `urlSecret` and `url` must be defined."', args=[d.arg(name='url', type=d.T.string)]),
        withUrl(url): { url: url },
      },
      '#wechat_configs':: d.obj(help='"WeChatConfigs defines wechat notification configurations."'),
      wechat_configs: {
        '#api_secret':: d.obj(help="\"The secret's key that contains the WeChat API key.\\nThe secret needs to be in the same namespace as the AlertmanagerConfig\\nfallback to global alertmanager setting if empty\""),
        api_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { api_secret+: { key: key } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { api_secret+: { name: name } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { api_secret+: { optional: optional } },
        },
        '#http_config':: d.obj(help='"HTTP client configuration."'),
        http_config: {
          '#authorization':: d.obj(help='"Authorization header configuration for the client.\\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."'),
          authorization: {
            '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
            credentials: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { authorization+: { credentials+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { authorization+: { credentials+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { authorization+: { credentials+: { optional: optional } } } },
            },
            '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
            withCredentialsFile(credentialsFile): { http_config+: { authorization+: { credentialsFile: credentialsFile } } },
            '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { http_config+: { authorization+: { type: type } } },
          },
          '#basic_auth':: d.obj(help='"BasicAuth for the client."'),
          basic_auth: {
            '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
            password: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { password+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { password+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { password+: { optional: optional } } } },
            },
            '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
            username: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { basic_auth+: { username+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { basic_auth+: { username+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { basic_auth+: { username+: { optional: optional } } } },
            },
            '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
            withPassword_file(password_file): { http_config+: { basic_auth+: { password_file: password_file } } },
          },
          '#bearer_token_secret':: d.obj(help="\"The secret's key that contains the bearer token\\nIt must be at them same namespace as CRD\""),
          bearer_token_secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { http_config+: { bearer_token_secret+: { key: key } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { http_config+: { bearer_token_secret+: { name: name } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { http_config+: { bearer_token_secret+: { optional: optional } } },
          },
          '#oauth2':: d.obj(help='"OAuth2 client credentials used to fetch a token for the targets."'),
          oauth2: {
            '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
            client_id: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
              },
            },
            '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
            client_secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { oauth2+: { client_secret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { oauth2+: { client_secret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { oauth2+: { client_secret+: { optional: optional } } } },
            },
            '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
            withClient_secret_file(client_secret_file): { http_config+: { oauth2+: { client_secret_file: client_secret_file } } },
            '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_params(endpoint_params): { http_config+: { oauth2+: { endpoint_params: endpoint_params } } },
            '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
            withEndpoint_paramsMixin(endpoint_params): { http_config+: { oauth2+: { endpoint_params+: endpoint_params } } },
            '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopes(scopes): { http_config+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
            withScopesMixin(scopes): { http_config+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
            '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
            withToken_url(token_url): { http_config+: { oauth2+: { token_url: token_url } } },
          },
          '#tls_config':: d.obj(help='"TLS configuration for the client."'),
          tls_config: {
            '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
            ca: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
              },
            },
            '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
            cert: {
              '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
              configMap: {
                '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
              },
              '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
              secret: {
                '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { http_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
                '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { http_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
                '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { http_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
              },
            },
            '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
            keySecret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { http_config+: { tls_config+: { keySecret+: { key: key } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { http_config+: { tls_config+: { keySecret+: { name: name } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { http_config+: { tls_config+: { keySecret+: { optional: optional } } } },
            },
            '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
            withCaFile(caFile): { http_config+: { tls_config+: { caFile: caFile } } },
            '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
            withCertFile(certFile): { http_config+: { tls_config+: { certFile: certFile } } },
            '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
            withInsecureSkipVerify(insecureSkipVerify): { http_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
            '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
            withKeyFile(keyFile): { http_config+: { tls_config+: { keyFile: keyFile } } },
            '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
            withServerName(serverName): { http_config+: { tls_config+: { serverName: serverName } } },
          },
          '#withBearer_token_file':: d.fn(help='"BearerTokenFile defines filename for bearer token, it must be mounted to pod."', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
          withBearer_token_file(bearer_token_file): { http_config+: { bearer_token_file: bearer_token_file } },
          '#withProxyURL':: d.fn(help='"Optional proxy URL."', args=[d.arg(name='proxyURL', type=d.T.string)]),
          withProxyURL(proxyURL): { http_config+: { proxyURL: proxyURL } },
        },
        '#withAgent_id':: d.fn(help='', args=[d.arg(name='agent_id', type=d.T.string)]),
        withAgent_id(agent_id): { agent_id: agent_id },
        '#withApi_url':: d.fn(help='"The WeChat API URL.\\nfallback to global alertmanager setting if empty"', args=[d.arg(name='api_url', type=d.T.string)]),
        withApi_url(api_url): { api_url: api_url },
        '#withCorp_id':: d.fn(help='"The corp id for authentication.\\nfallback to global alertmanager setting if empty"', args=[d.arg(name='corp_id', type=d.T.string)]),
        withCorp_id(corp_id): { corp_id: corp_id },
        '#withMessage':: d.fn(help='"API request data as defined by the WeChat API."', args=[d.arg(name='message', type=d.T.string)]),
        withMessage(message): { message: message },
        '#withMessage_type':: d.fn(help='', args=[d.arg(name='message_type', type=d.T.string)]),
        withMessage_type(message_type): { message_type: message_type },
        '#withSend_resolved':: d.fn(help='"SendResolved controls notify about resolved alerts."', args=[d.arg(name='send_resolved', type=d.T.boolean)]),
        withSend_resolved(send_resolved): { send_resolved: send_resolved },
        '#withTo_party':: d.fn(help='', args=[d.arg(name='to_party', type=d.T.string)]),
        withTo_party(to_party): { to_party: to_party },
        '#withTo_tag':: d.fn(help='', args=[d.arg(name='to_tag', type=d.T.string)]),
        withTo_tag(to_tag): { to_tag: to_tag },
        '#withTo_user':: d.fn(help='', args=[d.arg(name='to_user', type=d.T.string)]),
        withTo_user(to_user): { to_user: to_user },
      },
      '#withDiscord_configs':: d.fn(help='', args=[d.arg(name='discord_configs', type=d.T.array)]),
      withDiscord_configs(discord_configs): { discord_configs: if std.isArray(v=discord_configs) then discord_configs else [discord_configs] },
      '#withDiscord_configsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='discord_configs', type=d.T.array)]),
      withDiscord_configsMixin(discord_configs): { discord_configs+: if std.isArray(v=discord_configs) then discord_configs else [discord_configs] },
      '#withEmail_configs':: d.fn(help='"EmailConfigs defines email notification configurations."', args=[d.arg(name='email_configs', type=d.T.array)]),
      withEmail_configs(email_configs): { email_configs: if std.isArray(v=email_configs) then email_configs else [email_configs] },
      '#withEmail_configsMixin':: d.fn(help='"EmailConfigs defines email notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='email_configs', type=d.T.array)]),
      withEmail_configsMixin(email_configs): { email_configs+: if std.isArray(v=email_configs) then email_configs else [email_configs] },
      '#withMsteams_configs':: d.fn(help='', args=[d.arg(name='msteams_configs', type=d.T.array)]),
      withMsteams_configs(msteams_configs): { msteams_configs: if std.isArray(v=msteams_configs) then msteams_configs else [msteams_configs] },
      '#withMsteams_configsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='msteams_configs', type=d.T.array)]),
      withMsteams_configsMixin(msteams_configs): { msteams_configs+: if std.isArray(v=msteams_configs) then msteams_configs else [msteams_configs] },
      '#withName':: d.fn(help='"Name of the receiver. Must be unique across all items from the list."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withOpsgenie_configs':: d.fn(help='"OpsGenieConfigs defines ops genie notification configurations."', args=[d.arg(name='opsgenie_configs', type=d.T.array)]),
      withOpsgenie_configs(opsgenie_configs): { opsgenie_configs: if std.isArray(v=opsgenie_configs) then opsgenie_configs else [opsgenie_configs] },
      '#withOpsgenie_configsMixin':: d.fn(help='"OpsGenieConfigs defines ops genie notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='opsgenie_configs', type=d.T.array)]),
      withOpsgenie_configsMixin(opsgenie_configs): { opsgenie_configs+: if std.isArray(v=opsgenie_configs) then opsgenie_configs else [opsgenie_configs] },
      '#withPagerduty_configs':: d.fn(help='"PagerDutyConfigs defines pager duty notification configurations."', args=[d.arg(name='pagerduty_configs', type=d.T.array)]),
      withPagerduty_configs(pagerduty_configs): { pagerduty_configs: if std.isArray(v=pagerduty_configs) then pagerduty_configs else [pagerduty_configs] },
      '#withPagerduty_configsMixin':: d.fn(help='"PagerDutyConfigs defines pager duty notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pagerduty_configs', type=d.T.array)]),
      withPagerduty_configsMixin(pagerduty_configs): { pagerduty_configs+: if std.isArray(v=pagerduty_configs) then pagerduty_configs else [pagerduty_configs] },
      '#withPushover_configs':: d.fn(help='"PushoverConfigs defines push over notification configurations."', args=[d.arg(name='pushover_configs', type=d.T.array)]),
      withPushover_configs(pushover_configs): { pushover_configs: if std.isArray(v=pushover_configs) then pushover_configs else [pushover_configs] },
      '#withPushover_configsMixin':: d.fn(help='"PushoverConfigs defines push over notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='pushover_configs', type=d.T.array)]),
      withPushover_configsMixin(pushover_configs): { pushover_configs+: if std.isArray(v=pushover_configs) then pushover_configs else [pushover_configs] },
      '#withSlack_configs':: d.fn(help='"SlackConfigs defines slack notification configurations."', args=[d.arg(name='slack_configs', type=d.T.array)]),
      withSlack_configs(slack_configs): { slack_configs: if std.isArray(v=slack_configs) then slack_configs else [slack_configs] },
      '#withSlack_configsMixin':: d.fn(help='"SlackConfigs defines slack notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='slack_configs', type=d.T.array)]),
      withSlack_configsMixin(slack_configs): { slack_configs+: if std.isArray(v=slack_configs) then slack_configs else [slack_configs] },
      '#withSns_configs':: d.fn(help='', args=[d.arg(name='sns_configs', type=d.T.array)]),
      withSns_configs(sns_configs): { sns_configs: if std.isArray(v=sns_configs) then sns_configs else [sns_configs] },
      '#withSns_configsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sns_configs', type=d.T.array)]),
      withSns_configsMixin(sns_configs): { sns_configs+: if std.isArray(v=sns_configs) then sns_configs else [sns_configs] },
      '#withTelegram_configs':: d.fn(help='', args=[d.arg(name='telegram_configs', type=d.T.array)]),
      withTelegram_configs(telegram_configs): { telegram_configs: if std.isArray(v=telegram_configs) then telegram_configs else [telegram_configs] },
      '#withTelegram_configsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='telegram_configs', type=d.T.array)]),
      withTelegram_configsMixin(telegram_configs): { telegram_configs+: if std.isArray(v=telegram_configs) then telegram_configs else [telegram_configs] },
      '#withVictorops_configs':: d.fn(help='"VictorOpsConfigs defines victor ops notification configurations."', args=[d.arg(name='victorops_configs', type=d.T.array)]),
      withVictorops_configs(victorops_configs): { victorops_configs: if std.isArray(v=victorops_configs) then victorops_configs else [victorops_configs] },
      '#withVictorops_configsMixin':: d.fn(help='"VictorOpsConfigs defines victor ops notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='victorops_configs', type=d.T.array)]),
      withVictorops_configsMixin(victorops_configs): { victorops_configs+: if std.isArray(v=victorops_configs) then victorops_configs else [victorops_configs] },
      '#withWebex_configs':: d.fn(help='', args=[d.arg(name='webex_configs', type=d.T.array)]),
      withWebex_configs(webex_configs): { webex_configs: if std.isArray(v=webex_configs) then webex_configs else [webex_configs] },
      '#withWebex_configsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='webex_configs', type=d.T.array)]),
      withWebex_configsMixin(webex_configs): { webex_configs+: if std.isArray(v=webex_configs) then webex_configs else [webex_configs] },
      '#withWebhook_configs':: d.fn(help='"WebhookConfigs defines webhook notification configurations."', args=[d.arg(name='webhook_configs', type=d.T.array)]),
      withWebhook_configs(webhook_configs): { webhook_configs: if std.isArray(v=webhook_configs) then webhook_configs else [webhook_configs] },
      '#withWebhook_configsMixin':: d.fn(help='"WebhookConfigs defines webhook notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='webhook_configs', type=d.T.array)]),
      withWebhook_configsMixin(webhook_configs): { webhook_configs+: if std.isArray(v=webhook_configs) then webhook_configs else [webhook_configs] },
      '#withWechat_configs':: d.fn(help='"WeChatConfigs defines wechat notification configurations."', args=[d.arg(name='wechat_configs', type=d.T.array)]),
      withWechat_configs(wechat_configs): { wechat_configs: if std.isArray(v=wechat_configs) then wechat_configs else [wechat_configs] },
      '#withWechat_configsMixin':: d.fn(help='"WeChatConfigs defines wechat notification configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='wechat_configs', type=d.T.array)]),
      withWechat_configsMixin(wechat_configs): { wechat_configs+: if std.isArray(v=wechat_configs) then wechat_configs else [wechat_configs] },
    },
    '#route':: d.obj(help='"Route definition for alertmanager, may include nested routes."'),
    route: {
      '#withActive_time_intervals':: d.fn(help='"ActiveTimeIntervals Times when the route should be active\\nThese must match the name at time_intervals"', args=[d.arg(name='active_time_intervals', type=d.T.array)]),
      withActive_time_intervals(active_time_intervals): { spec+: { route+: { active_time_intervals: if std.isArray(v=active_time_intervals) then active_time_intervals else [active_time_intervals] } } },
      '#withActive_time_intervalsMixin':: d.fn(help='"ActiveTimeIntervals Times when the route should be active\\nThese must match the name at time_intervals"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='active_time_intervals', type=d.T.array)]),
      withActive_time_intervalsMixin(active_time_intervals): { spec+: { route+: { active_time_intervals+: if std.isArray(v=active_time_intervals) then active_time_intervals else [active_time_intervals] } } },
      '#withContinue':: d.fn(help='"Continue indicating whether an alert should continue matching subsequent\\nsibling nodes. It will always be true for the first-level route if disableRouteContinueEnforce for vmalertmanager not set."', args=[d.arg(name='continue', type=d.T.boolean)]),
      withContinue(continue): { spec+: { route+: { continue: continue } } },
      '#withGroup_by':: d.fn(help='"List of labels to group by."', args=[d.arg(name='group_by', type=d.T.array)]),
      withGroup_by(group_by): { spec+: { route+: { group_by: if std.isArray(v=group_by) then group_by else [group_by] } } },
      '#withGroup_byMixin':: d.fn(help='"List of labels to group by."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='group_by', type=d.T.array)]),
      withGroup_byMixin(group_by): { spec+: { route+: { group_by+: if std.isArray(v=group_by) then group_by else [group_by] } } },
      '#withGroup_interval':: d.fn(help='"How long to wait before sending an updated notification."', args=[d.arg(name='group_interval', type=d.T.string)]),
      withGroup_interval(group_interval): { spec+: { route+: { group_interval: group_interval } } },
      '#withGroup_wait':: d.fn(help='"How long to wait before sending the initial notification."', args=[d.arg(name='group_wait', type=d.T.string)]),
      withGroup_wait(group_wait): { spec+: { route+: { group_wait: group_wait } } },
      '#withMatchers':: d.fn(help='"List of matchers that the alert’s labels should match. For the first\\nlevel route, the operator adds a namespace: \\"CRD_NS\\" matcher.\\nhttps://prometheus.io/docs/alerting/latest/configuration/#matcher"', args=[d.arg(name='matchers', type=d.T.array)]),
      withMatchers(matchers): { spec+: { route+: { matchers: if std.isArray(v=matchers) then matchers else [matchers] } } },
      '#withMatchersMixin':: d.fn(help='"List of matchers that the alert’s labels should match. For the first\\nlevel route, the operator adds a namespace: \\"CRD_NS\\" matcher.\\nhttps://prometheus.io/docs/alerting/latest/configuration/#matcher"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchers', type=d.T.array)]),
      withMatchersMixin(matchers): { spec+: { route+: { matchers+: if std.isArray(v=matchers) then matchers else [matchers] } } },
      '#withMute_time_intervals':: d.fn(help='"MuteTimeIntervals is a list of interval names that will mute matched alert"', args=[d.arg(name='mute_time_intervals', type=d.T.array)]),
      withMute_time_intervals(mute_time_intervals): { spec+: { route+: { mute_time_intervals: if std.isArray(v=mute_time_intervals) then mute_time_intervals else [mute_time_intervals] } } },
      '#withMute_time_intervalsMixin':: d.fn(help='"MuteTimeIntervals is a list of interval names that will mute matched alert"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mute_time_intervals', type=d.T.array)]),
      withMute_time_intervalsMixin(mute_time_intervals): { spec+: { route+: { mute_time_intervals+: if std.isArray(v=mute_time_intervals) then mute_time_intervals else [mute_time_intervals] } } },
      '#withReceiver':: d.fn(help='"Name of the receiver for this route."', args=[d.arg(name='receiver', type=d.T.string)]),
      withReceiver(receiver): { spec+: { route+: { receiver: receiver } } },
      '#withRepeat_interval':: d.fn(help='"How long to wait before repeating the last notification."', args=[d.arg(name='repeat_interval', type=d.T.string)]),
      withRepeat_interval(repeat_interval): { spec+: { route+: { repeat_interval: repeat_interval } } },
      '#withRoutes':: d.fn(help='"Child routes.\\nhttps://prometheus.io/docs/alerting/latest/configuration/#route"', args=[d.arg(name='routes', type=d.T.array)]),
      withRoutes(routes): { spec+: { route+: { routes: if std.isArray(v=routes) then routes else [routes] } } },
      '#withRoutesMixin':: d.fn(help='"Child routes.\\nhttps://prometheus.io/docs/alerting/latest/configuration/#route"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='routes', type=d.T.array)]),
      withRoutesMixin(routes): { spec+: { route+: { routes+: if std.isArray(v=routes) then routes else [routes] } } },
    },
    '#time_intervals':: d.obj(help='"TimeIntervals defines named interval for active/mute notifications interval\\nSee https://prometheus.io/docs/alerting/latest/configuration/#time_interval"'),
    time_intervals: {
      '#time_intervals':: d.obj(help='"TimeIntervals interval configuration"'),
      time_intervals: {
        '#times':: d.obj(help='"Times defines time range for mute"'),
        times: {
          '#withEnd_time':: d.fn(help='"EndTime for example HH:MM"', args=[d.arg(name='end_time', type=d.T.string)]),
          withEnd_time(end_time): { end_time: end_time },
          '#withStart_time':: d.fn(help='"StartTime for example  HH:MM"', args=[d.arg(name='start_time', type=d.T.string)]),
          withStart_time(start_time): { start_time: start_time },
        },
        '#withDays_of_month':: d.fn(help="\"DayOfMonth defines list of numerical days in the month. Days begin at 1. Negative values are also accepted.\\nfor example, ['1:5', '-3:-1']\"", args=[d.arg(name='days_of_month', type=d.T.array)]),
        withDays_of_month(days_of_month): { days_of_month: if std.isArray(v=days_of_month) then days_of_month else [days_of_month] },
        '#withDays_of_monthMixin':: d.fn(help="\"DayOfMonth defines list of numerical days in the month. Days begin at 1. Negative values are also accepted.\\nfor example, ['1:5', '-3:-1']\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='days_of_month', type=d.T.array)]),
        withDays_of_monthMixin(days_of_month): { days_of_month+: if std.isArray(v=days_of_month) then days_of_month else [days_of_month] },
        '#withLocation':: d.fn(help='"Location in golang time location form, e.g. UTC"', args=[d.arg(name='location', type=d.T.string)]),
        withLocation(location): { location: location },
        '#withMonths':: d.fn(help="\"Months  defines list of calendar months identified by a case-insensitive name (e.g. ‘January’) or numeric 1.\\nFor example, ['1:3', 'may:august', 'december']\"", args=[d.arg(name='months', type=d.T.array)]),
        withMonths(months): { months: if std.isArray(v=months) then months else [months] },
        '#withMonthsMixin':: d.fn(help="\"Months  defines list of calendar months identified by a case-insensitive name (e.g. ‘January’) or numeric 1.\\nFor example, ['1:3', 'may:august', 'december']\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='months', type=d.T.array)]),
        withMonthsMixin(months): { months+: if std.isArray(v=months) then months else [months] },
        '#withTimes':: d.fn(help='"Times defines time range for mute"', args=[d.arg(name='times', type=d.T.array)]),
        withTimes(times): { times: if std.isArray(v=times) then times else [times] },
        '#withTimesMixin':: d.fn(help='"Times defines time range for mute"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='times', type=d.T.array)]),
        withTimesMixin(times): { times+: if std.isArray(v=times) then times else [times] },
        '#withWeekdays':: d.fn(help='"Weekdays defines list of days of the week, where the week begins on Sunday and ends on Saturday."', args=[d.arg(name='weekdays', type=d.T.array)]),
        withWeekdays(weekdays): { weekdays: if std.isArray(v=weekdays) then weekdays else [weekdays] },
        '#withWeekdaysMixin':: d.fn(help='"Weekdays defines list of days of the week, where the week begins on Sunday and ends on Saturday."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='weekdays', type=d.T.array)]),
        withWeekdaysMixin(weekdays): { weekdays+: if std.isArray(v=weekdays) then weekdays else [weekdays] },
        '#withYears':: d.fn(help="\"Years defines numerical list of years, ranges are accepted.\\nFor example, ['2020:2022', '2030']\"", args=[d.arg(name='years', type=d.T.array)]),
        withYears(years): { years: if std.isArray(v=years) then years else [years] },
        '#withYearsMixin':: d.fn(help="\"Years defines numerical list of years, ranges are accepted.\\nFor example, ['2020:2022', '2030']\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='years', type=d.T.array)]),
        withYearsMixin(years): { years+: if std.isArray(v=years) then years else [years] },
      },
      '#withName':: d.fn(help='"Name of interval"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withTime_intervals':: d.fn(help='"TimeIntervals interval configuration"', args=[d.arg(name='time_intervals', type=d.T.array)]),
      withTime_intervals(time_intervals): { time_intervals: if std.isArray(v=time_intervals) then time_intervals else [time_intervals] },
      '#withTime_intervalsMixin':: d.fn(help='"TimeIntervals interval configuration"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='time_intervals', type=d.T.array)]),
      withTime_intervalsMixin(time_intervals): { time_intervals+: if std.isArray(v=time_intervals) then time_intervals else [time_intervals] },
    },
    '#withInhibit_rules':: d.fn(help="\"InhibitRules will only apply for alerts matching\\nthe resource's namespace.\"", args=[d.arg(name='inhibit_rules', type=d.T.array)]),
    withInhibit_rules(inhibit_rules): { spec+: { inhibit_rules: if std.isArray(v=inhibit_rules) then inhibit_rules else [inhibit_rules] } },
    '#withInhibit_rulesMixin':: d.fn(help="\"InhibitRules will only apply for alerts matching\\nthe resource's namespace.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='inhibit_rules', type=d.T.array)]),
    withInhibit_rulesMixin(inhibit_rules): { spec+: { inhibit_rules+: if std.isArray(v=inhibit_rules) then inhibit_rules else [inhibit_rules] } },
    '#withReceivers':: d.fn(help='"Receivers defines alert receivers"', args=[d.arg(name='receivers', type=d.T.array)]),
    withReceivers(receivers): { spec+: { receivers: if std.isArray(v=receivers) then receivers else [receivers] } },
    '#withReceiversMixin':: d.fn(help='"Receivers defines alert receivers"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='receivers', type=d.T.array)]),
    withReceiversMixin(receivers): { spec+: { receivers+: if std.isArray(v=receivers) then receivers else [receivers] } },
    '#withTime_intervals':: d.fn(help='"TimeIntervals defines named interval for active/mute notifications interval\\nSee https://prometheus.io/docs/alerting/latest/configuration/#time_interval"', args=[d.arg(name='time_intervals', type=d.T.array)]),
    withTime_intervals(time_intervals): { spec+: { time_intervals: if std.isArray(v=time_intervals) then time_intervals else [time_intervals] } },
    '#withTime_intervalsMixin':: d.fn(help='"TimeIntervals defines named interval for active/mute notifications interval\\nSee https://prometheus.io/docs/alerting/latest/configuration/#time_interval"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='time_intervals', type=d.T.array)]),
    withTime_intervalsMixin(time_intervals): { spec+: { time_intervals+: if std.isArray(v=time_intervals) then time_intervals else [time_intervals] } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
