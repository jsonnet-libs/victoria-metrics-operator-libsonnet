{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='vmScrapeConfig', url='', help='"VMScrapeConfig specifies a set of targets and parameters describing how to scrape them."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of VMScrapeConfig', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'operator.victoriametrics.com/v1beta1',
    kind: 'VMScrapeConfig',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"VMScrapeConfigSpec defines the desired state of VMScrapeConfig"'),
  spec: {
    '#authorization':: d.obj(help='"Authorization with http header Authorization"'),
    authorization: {
      '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
      credentials: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { authorization+: { credentials+: { key: key } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { authorization+: { credentials+: { name: name } } } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { authorization+: { credentials+: { optional: optional } } } },
      },
      '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
      withCredentialsFile(credentialsFile): { spec+: { authorization+: { credentialsFile: credentialsFile } } },
      '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { authorization+: { type: type } } },
    },
    '#azureSDConfigs':: d.obj(help='"AzureSDConfigs defines a list of Azure service discovery configurations."'),
    azureSDConfigs: {
      '#clientSecret':: d.obj(help='"Optional client secret. Only required with the OAuth authentication method."'),
      clientSecret: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { clientSecret+: { key: key } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { clientSecret+: { name: name } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { clientSecret+: { optional: optional } },
      },
      '#withAuthenticationMethod':: d.fn(help='"# The authentication method, either OAuth or ManagedIdentity.\\nSee https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview"', args=[d.arg(name='authenticationMethod', type=d.T.string)]),
      withAuthenticationMethod(authenticationMethod): { authenticationMethod: authenticationMethod },
      '#withClientID':: d.fn(help='"Optional client ID. Only required with the OAuth authentication method."', args=[d.arg(name='clientID', type=d.T.string)]),
      withClientID(clientID): { clientID: clientID },
      '#withEnvironment':: d.fn(help='"The Azure environment."', args=[d.arg(name='environment', type=d.T.string)]),
      withEnvironment(environment): { environment: environment },
      '#withPort':: d.fn(help='"The port to scrape metrics from. If using the public IP address, this must\\ninstead be specified in the relabeling rule."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { port: port },
      '#withResourceGroup':: d.fn(help='"Optional resource group name. Limits discovery to this resource group."', args=[d.arg(name='resourceGroup', type=d.T.string)]),
      withResourceGroup(resourceGroup): { resourceGroup: resourceGroup },
      '#withSubscriptionID':: d.fn(help='"The subscription ID. Always required."', args=[d.arg(name='subscriptionID', type=d.T.string)]),
      withSubscriptionID(subscriptionID): { subscriptionID: subscriptionID },
      '#withTenantID':: d.fn(help='"Optional tenant ID. Only required with the OAuth authentication method."', args=[d.arg(name='tenantID', type=d.T.string)]),
      withTenantID(tenantID): { tenantID: tenantID },
    },
    '#basicAuth':: d.obj(help='"BasicAuth allow an endpoint to authenticate over basic authentication"'),
    basicAuth: {
      '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
      password: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { basicAuth+: { password+: { key: key } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { basicAuth+: { password+: { name: name } } } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { basicAuth+: { password+: { optional: optional } } } },
      },
      '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
      username: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { basicAuth+: { username+: { key: key } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { basicAuth+: { username+: { name: name } } } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { basicAuth+: { username+: { optional: optional } } } },
      },
      '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
      withPassword_file(password_file): { spec+: { basicAuth+: { password_file: password_file } } },
    },
    '#bearerTokenSecret':: d.obj(help='"Secret to mount to read bearer token for scraping targets. The secret\\nneeds to be in the same namespace as the scrape object and accessible by\\nthe victoria-metrics operator."'),
    bearerTokenSecret: {
      '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { spec+: { bearerTokenSecret+: { key: key } } },
      '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { bearerTokenSecret+: { name: name } } },
      '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
      withOptional(optional): { spec+: { bearerTokenSecret+: { optional: optional } } },
    },
    '#consulSDConfigs':: d.obj(help='"ConsulSDConfigs defines a list of Consul service discovery configurations."'),
    consulSDConfigs: {
      '#authorization':: d.obj(help='"Authorization header to use on every scrape request."'),
      authorization: {
        '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
        credentials: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { authorization+: { credentials+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { authorization+: { credentials+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { authorization+: { credentials+: { optional: optional } } },
        },
        '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
        withCredentialsFile(credentialsFile): { authorization+: { credentialsFile: credentialsFile } },
        '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { authorization+: { type: type } },
      },
      '#basicAuth':: d.obj(help='"BasicAuth information to use on every scrape request."'),
      basicAuth: {
        '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
        password: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { basicAuth+: { password+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { basicAuth+: { password+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { basicAuth+: { password+: { optional: optional } } },
        },
        '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
        username: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { basicAuth+: { username+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { basicAuth+: { username+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { basicAuth+: { username+: { optional: optional } } },
        },
        '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
        withPassword_file(password_file): { basicAuth+: { password_file: password_file } },
      },
      '#oauth2':: d.obj(help='"OAuth2 defines auth configuration"'),
      oauth2: {
        '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
        client_id: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { oauth2+: { client_id+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { oauth2+: { client_id+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { oauth2+: { client_id+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { oauth2+: { client_id+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { oauth2+: { client_id+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { oauth2+: { client_id+: { secret+: { optional: optional } } } },
          },
        },
        '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
        client_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { oauth2+: { client_secret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { oauth2+: { client_secret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { oauth2+: { client_secret+: { optional: optional } } },
        },
        '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
        withClient_secret_file(client_secret_file): { oauth2+: { client_secret_file: client_secret_file } },
        '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
        withEndpoint_params(endpoint_params): { oauth2+: { endpoint_params: endpoint_params } },
        '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
        withEndpoint_paramsMixin(endpoint_params): { oauth2+: { endpoint_params+: endpoint_params } },
        '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
        withScopes(scopes): { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } },
        '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
        withScopesMixin(scopes): { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } },
        '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
        withToken_url(token_url): { oauth2+: { token_url: token_url } },
      },
      '#proxy_client_config':: d.obj(help='"ProxyClientConfig configures proxy auth settings for scraping\\nSee [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)"'),
      proxy_client_config: {
        '#basic_auth':: d.obj(help='"BasicAuth allow an endpoint to authenticate over basic authentication"'),
        basic_auth: {
          '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
          password: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { password+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { password+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { password+: { optional: optional } } } },
          },
          '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
          username: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { username+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { username+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { username+: { optional: optional } } } },
          },
          '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
          withPassword_file(password_file): { proxy_client_config+: { basic_auth+: { password_file: password_file } } },
        },
        '#bearer_token':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
        bearer_token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { proxy_client_config+: { bearer_token+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { proxy_client_config+: { bearer_token+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { proxy_client_config+: { bearer_token+: { optional: optional } } },
        },
        '#tls_config':: d.obj(help='"TLSConfig specifies TLSConfig configuration parameters."'),
        tls_config: {
          '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
          ca: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
            },
          },
          '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
          cert: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
            },
          },
          '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
          keySecret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { tls_config+: { keySecret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { tls_config+: { keySecret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { tls_config+: { keySecret+: { optional: optional } } } },
          },
          '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
          withCaFile(caFile): { proxy_client_config+: { tls_config+: { caFile: caFile } } },
          '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
          withCertFile(certFile): { proxy_client_config+: { tls_config+: { certFile: certFile } } },
          '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
          withInsecureSkipVerify(insecureSkipVerify): { proxy_client_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
          '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
          withKeyFile(keyFile): { proxy_client_config+: { tls_config+: { keyFile: keyFile } } },
          '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
          withServerName(serverName): { proxy_client_config+: { tls_config+: { serverName: serverName } } },
        },
        '#withBearer_token_file':: d.fn(help='', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
        withBearer_token_file(bearer_token_file): { proxy_client_config+: { bearer_token_file: bearer_token_file } },
      },
      '#tlsConfig':: d.obj(help='"TLS configuration to use on every scrape request"'),
      tlsConfig: {
        '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
        ca: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { secret+: { optional: optional } } } },
          },
        },
        '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
        cert: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { secret+: { optional: optional } } } },
          },
        },
        '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
        keySecret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { tlsConfig+: { keySecret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { tlsConfig+: { keySecret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { tlsConfig+: { keySecret+: { optional: optional } } },
        },
        '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
        withCaFile(caFile): { tlsConfig+: { caFile: caFile } },
        '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
        withCertFile(certFile): { tlsConfig+: { certFile: certFile } },
        '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
        withInsecureSkipVerify(insecureSkipVerify): { tlsConfig+: { insecureSkipVerify: insecureSkipVerify } },
        '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
        withKeyFile(keyFile): { tlsConfig+: { keyFile: keyFile } },
        '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
        withServerName(serverName): { tlsConfig+: { serverName: serverName } },
      },
      '#tokenRef':: d.obj(help='"Consul ACL TokenRef, if not provided it will use the ACL from the local Consul Agent."'),
      tokenRef: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { tokenRef+: { key: key } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { tokenRef+: { name: name } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { tokenRef+: { optional: optional } },
      },
      '#withAllowStale':: d.fn(help='"Allow stale Consul results (see https://developer.hashicorp.com/consul/api-docs/features/consistency). Will reduce load on Consul.\\nIf unset, use its default value."', args=[d.arg(name='allowStale', type=d.T.boolean)]),
      withAllowStale(allowStale): { allowStale: allowStale },
      '#withDatacenter':: d.fn(help='"Consul Datacenter name, if not provided it will use the local Consul Agent Datacenter."', args=[d.arg(name='datacenter', type=d.T.string)]),
      withDatacenter(datacenter): { datacenter: datacenter },
      '#withFollowRedirects':: d.fn(help='"Configure whether HTTP requests follow HTTP 3xx redirects.\\nIf unset, use its default value."', args=[d.arg(name='followRedirects', type=d.T.boolean)]),
      withFollowRedirects(followRedirects): { followRedirects: followRedirects },
      '#withNamespace':: d.fn(help='"Namespaces are only supported in Consul Enterprise."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { namespace: namespace },
      '#withNodeMeta':: d.fn(help='"Node metadata key/value pairs to filter nodes for a given service."', args=[d.arg(name='nodeMeta', type=d.T.object)]),
      withNodeMeta(nodeMeta): { nodeMeta: nodeMeta },
      '#withNodeMetaMixin':: d.fn(help='"Node metadata key/value pairs to filter nodes for a given service."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeMeta', type=d.T.object)]),
      withNodeMetaMixin(nodeMeta): { nodeMeta+: nodeMeta },
      '#withPartition':: d.fn(help='"Admin Partitions are only supported in Consul Enterprise."', args=[d.arg(name='partition', type=d.T.string)]),
      withPartition(partition): { partition: partition },
      '#withProxyURL':: d.fn(help='"ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint."', args=[d.arg(name='proxyURL', type=d.T.string)]),
      withProxyURL(proxyURL): { proxyURL: proxyURL },
      '#withScheme':: d.fn(help='"HTTP Scheme default \\"http\\', args=[d.arg(name='scheme', type=d.T.string)]),
      withScheme(scheme): { scheme: scheme },
      '#withServer':: d.fn(help='"A valid string consisting of a hostname or IP followed by an optional port number."', args=[d.arg(name='server', type=d.T.string)]),
      withServer(server): { server: server },
      '#withServices':: d.fn(help='"A list of services for which targets are retrieved. If omitted, all services are scraped."', args=[d.arg(name='services', type=d.T.array)]),
      withServices(services): { services: if std.isArray(v=services) then services else [services] },
      '#withServicesMixin':: d.fn(help='"A list of services for which targets are retrieved. If omitted, all services are scraped."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='services', type=d.T.array)]),
      withServicesMixin(services): { services+: if std.isArray(v=services) then services else [services] },
      '#withTagSeparator':: d.fn(help='"The string by which Consul tags are joined into the tag label.\\nIf unset, use its default value."', args=[d.arg(name='tagSeparator', type=d.T.string)]),
      withTagSeparator(tagSeparator): { tagSeparator: tagSeparator },
      '#withTags':: d.fn(help='"An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list."', args=[d.arg(name='tags', type=d.T.array)]),
      withTags(tags): { tags: if std.isArray(v=tags) then tags else [tags] },
      '#withTagsMixin':: d.fn(help='"An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.array)]),
      withTagsMixin(tags): { tags+: if std.isArray(v=tags) then tags else [tags] },
    },
    '#digitalOceanSDConfigs':: d.obj(help='"DigitalOceanSDConfigs defines a list of DigitalOcean service discovery configurations."'),
    digitalOceanSDConfigs: {
      '#authorization':: d.obj(help='"Authorization header to use on every scrape request."'),
      authorization: {
        '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
        credentials: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { authorization+: { credentials+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { authorization+: { credentials+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { authorization+: { credentials+: { optional: optional } } },
        },
        '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
        withCredentialsFile(credentialsFile): { authorization+: { credentialsFile: credentialsFile } },
        '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { authorization+: { type: type } },
      },
      '#oauth2':: d.obj(help='"OAuth2 defines auth configuration"'),
      oauth2: {
        '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
        client_id: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { oauth2+: { client_id+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { oauth2+: { client_id+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { oauth2+: { client_id+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { oauth2+: { client_id+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { oauth2+: { client_id+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { oauth2+: { client_id+: { secret+: { optional: optional } } } },
          },
        },
        '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
        client_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { oauth2+: { client_secret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { oauth2+: { client_secret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { oauth2+: { client_secret+: { optional: optional } } },
        },
        '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
        withClient_secret_file(client_secret_file): { oauth2+: { client_secret_file: client_secret_file } },
        '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
        withEndpoint_params(endpoint_params): { oauth2+: { endpoint_params: endpoint_params } },
        '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
        withEndpoint_paramsMixin(endpoint_params): { oauth2+: { endpoint_params+: endpoint_params } },
        '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
        withScopes(scopes): { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } },
        '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
        withScopesMixin(scopes): { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } },
        '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
        withToken_url(token_url): { oauth2+: { token_url: token_url } },
      },
      '#proxy_client_config':: d.obj(help='"ProxyClientConfig configures proxy auth settings for scraping\\nSee [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)"'),
      proxy_client_config: {
        '#basic_auth':: d.obj(help='"BasicAuth allow an endpoint to authenticate over basic authentication"'),
        basic_auth: {
          '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
          password: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { password+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { password+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { password+: { optional: optional } } } },
          },
          '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
          username: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { username+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { username+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { username+: { optional: optional } } } },
          },
          '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
          withPassword_file(password_file): { proxy_client_config+: { basic_auth+: { password_file: password_file } } },
        },
        '#bearer_token':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
        bearer_token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { proxy_client_config+: { bearer_token+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { proxy_client_config+: { bearer_token+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { proxy_client_config+: { bearer_token+: { optional: optional } } },
        },
        '#tls_config':: d.obj(help='"TLSConfig specifies TLSConfig configuration parameters."'),
        tls_config: {
          '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
          ca: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
            },
          },
          '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
          cert: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
            },
          },
          '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
          keySecret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { tls_config+: { keySecret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { tls_config+: { keySecret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { tls_config+: { keySecret+: { optional: optional } } } },
          },
          '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
          withCaFile(caFile): { proxy_client_config+: { tls_config+: { caFile: caFile } } },
          '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
          withCertFile(certFile): { proxy_client_config+: { tls_config+: { certFile: certFile } } },
          '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
          withInsecureSkipVerify(insecureSkipVerify): { proxy_client_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
          '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
          withKeyFile(keyFile): { proxy_client_config+: { tls_config+: { keyFile: keyFile } } },
          '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
          withServerName(serverName): { proxy_client_config+: { tls_config+: { serverName: serverName } } },
        },
        '#withBearer_token_file':: d.fn(help='', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
        withBearer_token_file(bearer_token_file): { proxy_client_config+: { bearer_token_file: bearer_token_file } },
      },
      '#tlsConfig':: d.obj(help='"TLS configuration to use on every scrape request"'),
      tlsConfig: {
        '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
        ca: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { secret+: { optional: optional } } } },
          },
        },
        '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
        cert: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { secret+: { optional: optional } } } },
          },
        },
        '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
        keySecret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { tlsConfig+: { keySecret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { tlsConfig+: { keySecret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { tlsConfig+: { keySecret+: { optional: optional } } },
        },
        '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
        withCaFile(caFile): { tlsConfig+: { caFile: caFile } },
        '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
        withCertFile(certFile): { tlsConfig+: { certFile: certFile } },
        '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
        withInsecureSkipVerify(insecureSkipVerify): { tlsConfig+: { insecureSkipVerify: insecureSkipVerify } },
        '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
        withKeyFile(keyFile): { tlsConfig+: { keyFile: keyFile } },
        '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
        withServerName(serverName): { tlsConfig+: { serverName: serverName } },
      },
      '#withFollowRedirects':: d.fn(help='"Configure whether HTTP requests follow HTTP 3xx redirects."', args=[d.arg(name='followRedirects', type=d.T.boolean)]),
      withFollowRedirects(followRedirects): { followRedirects: followRedirects },
      '#withPort':: d.fn(help='"The port to scrape metrics from."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { port: port },
      '#withProxyURL':: d.fn(help='"ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint."', args=[d.arg(name='proxyURL', type=d.T.string)]),
      withProxyURL(proxyURL): { proxyURL: proxyURL },
    },
    '#dnsSDConfigs':: d.obj(help='"DNSSDConfigs defines a list of DNS service discovery configurations."'),
    dnsSDConfigs: {
      '#withNames':: d.fn(help='"A list of DNS domain names to be queried."', args=[d.arg(name='names', type=d.T.array)]),
      withNames(names): { names: if std.isArray(v=names) then names else [names] },
      '#withNamesMixin':: d.fn(help='"A list of DNS domain names to be queried."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='names', type=d.T.array)]),
      withNamesMixin(names): { names+: if std.isArray(v=names) then names else [names] },
      '#withPort':: d.fn(help='"The port number used if the query type is not SRV\\nIgnored for SRV records"', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { port: port },
      '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { type: type },
    },
    '#ec2SDConfigs':: d.obj(help='"EC2SDConfigs defines a list of EC2 service discovery configurations."'),
    ec2SDConfigs: {
      '#accessKey':: d.obj(help='"AccessKey is the AWS API key."'),
      accessKey: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { accessKey+: { key: key } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { accessKey+: { name: name } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { accessKey+: { optional: optional } },
      },
      '#filters':: d.obj(help='"Filters can be used optionally to filter the instance list by other criteria.\\nAvailable filter criteria can be found here:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\\nFilter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html"'),
      filters: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
        withValues(values): { values: if std.isArray(v=values) then values else [values] },
        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
      },
      '#secretKey':: d.obj(help='"SecretKey is the AWS API secret."'),
      secretKey: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { secretKey+: { key: key } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { secretKey+: { name: name } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { secretKey+: { optional: optional } },
      },
      '#withFilters':: d.fn(help='"Filters can be used optionally to filter the instance list by other criteria.\\nAvailable filter criteria can be found here:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\\nFilter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html"', args=[d.arg(name='filters', type=d.T.array)]),
      withFilters(filters): { filters: if std.isArray(v=filters) then filters else [filters] },
      '#withFiltersMixin':: d.fn(help='"Filters can be used optionally to filter the instance list by other criteria.\\nAvailable filter criteria can be found here:\\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\\nFilter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='filters', type=d.T.array)]),
      withFiltersMixin(filters): { filters+: if std.isArray(v=filters) then filters else [filters] },
      '#withPort':: d.fn(help='"The port to scrape metrics from. If using the public IP address, this must\\ninstead be specified in the relabeling rule."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { port: port },
      '#withRegion':: d.fn(help='"The AWS region"', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { region: region },
      '#withRoleARN':: d.fn(help='"AWS Role ARN, an alternative to using AWS API keys."', args=[d.arg(name='roleARN', type=d.T.string)]),
      withRoleARN(roleARN): { roleARN: roleARN },
    },
    '#fileSDConfigs':: d.obj(help='"FileSDConfigs defines a list of file service discovery configurations."'),
    fileSDConfigs: {
      '#withFiles':: d.fn(help='"List of files to be used for file discovery."', args=[d.arg(name='files', type=d.T.array)]),
      withFiles(files): { files: if std.isArray(v=files) then files else [files] },
      '#withFilesMixin':: d.fn(help='"List of files to be used for file discovery."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='files', type=d.T.array)]),
      withFilesMixin(files): { files+: if std.isArray(v=files) then files else [files] },
    },
    '#gceSDConfigs':: d.obj(help='"GCESDConfigs defines a list of GCE service discovery configurations."'),
    gceSDConfigs: {
      '#withFilter':: d.fn(help='"Filter can be used optionally to filter the instance list by other criteria\\nSyntax of this filter is described in the filter query parameter section:\\nhttps://cloud.google.com/compute/docs/reference/latest/instances/list"', args=[d.arg(name='filter', type=d.T.string)]),
      withFilter(filter): { filter: filter },
      '#withPort':: d.fn(help='"The port to scrape metrics from. If using the public IP address, this must\\ninstead be specified in the relabeling rule."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { port: port },
      '#withProject':: d.fn(help='"The Google Cloud Project ID"', args=[d.arg(name='project', type=d.T.string)]),
      withProject(project): { project: project },
      '#withTagSeparator':: d.fn(help='"The tag separator is used to separate the tags on concatenation"', args=[d.arg(name='tagSeparator', type=d.T.string)]),
      withTagSeparator(tagSeparator): { tagSeparator: tagSeparator },
      '#withZone':: d.fn(help='"The zone of the scrape targets. If you need multiple zones use multiple GCESDConfigs."', args=[d.arg(name='zone', type=d.T.string)]),
      withZone(zone): { zone: zone },
    },
    '#httpSDConfigs':: d.obj(help='"HTTPSDConfigs defines a list of HTTP service discovery configurations."'),
    httpSDConfigs: {
      '#authorization':: d.obj(help='"Authorization header to use on every scrape request."'),
      authorization: {
        '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
        credentials: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { authorization+: { credentials+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { authorization+: { credentials+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { authorization+: { credentials+: { optional: optional } } },
        },
        '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
        withCredentialsFile(credentialsFile): { authorization+: { credentialsFile: credentialsFile } },
        '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { authorization+: { type: type } },
      },
      '#basicAuth':: d.obj(help='"BasicAuth information to use on every scrape request."'),
      basicAuth: {
        '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
        password: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { basicAuth+: { password+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { basicAuth+: { password+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { basicAuth+: { password+: { optional: optional } } },
        },
        '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
        username: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { basicAuth+: { username+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { basicAuth+: { username+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { basicAuth+: { username+: { optional: optional } } },
        },
        '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
        withPassword_file(password_file): { basicAuth+: { password_file: password_file } },
      },
      '#proxy_client_config':: d.obj(help='"ProxyClientConfig configures proxy auth settings for scraping\\nSee [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)"'),
      proxy_client_config: {
        '#basic_auth':: d.obj(help='"BasicAuth allow an endpoint to authenticate over basic authentication"'),
        basic_auth: {
          '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
          password: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { password+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { password+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { password+: { optional: optional } } } },
          },
          '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
          username: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { username+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { username+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { username+: { optional: optional } } } },
          },
          '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
          withPassword_file(password_file): { proxy_client_config+: { basic_auth+: { password_file: password_file } } },
        },
        '#bearer_token':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
        bearer_token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { proxy_client_config+: { bearer_token+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { proxy_client_config+: { bearer_token+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { proxy_client_config+: { bearer_token+: { optional: optional } } },
        },
        '#tls_config':: d.obj(help='"TLSConfig specifies TLSConfig configuration parameters."'),
        tls_config: {
          '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
          ca: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
            },
          },
          '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
          cert: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
            },
          },
          '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
          keySecret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { tls_config+: { keySecret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { tls_config+: { keySecret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { tls_config+: { keySecret+: { optional: optional } } } },
          },
          '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
          withCaFile(caFile): { proxy_client_config+: { tls_config+: { caFile: caFile } } },
          '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
          withCertFile(certFile): { proxy_client_config+: { tls_config+: { certFile: certFile } } },
          '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
          withInsecureSkipVerify(insecureSkipVerify): { proxy_client_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
          '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
          withKeyFile(keyFile): { proxy_client_config+: { tls_config+: { keyFile: keyFile } } },
          '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
          withServerName(serverName): { proxy_client_config+: { tls_config+: { serverName: serverName } } },
        },
        '#withBearer_token_file':: d.fn(help='', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
        withBearer_token_file(bearer_token_file): { proxy_client_config+: { bearer_token_file: bearer_token_file } },
      },
      '#tlsConfig':: d.obj(help='"TLS configuration to use on every scrape request"'),
      tlsConfig: {
        '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
        ca: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { secret+: { optional: optional } } } },
          },
        },
        '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
        cert: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { secret+: { optional: optional } } } },
          },
        },
        '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
        keySecret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { tlsConfig+: { keySecret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { tlsConfig+: { keySecret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { tlsConfig+: { keySecret+: { optional: optional } } },
        },
        '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
        withCaFile(caFile): { tlsConfig+: { caFile: caFile } },
        '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
        withCertFile(certFile): { tlsConfig+: { certFile: certFile } },
        '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
        withInsecureSkipVerify(insecureSkipVerify): { tlsConfig+: { insecureSkipVerify: insecureSkipVerify } },
        '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
        withKeyFile(keyFile): { tlsConfig+: { keyFile: keyFile } },
        '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
        withServerName(serverName): { tlsConfig+: { serverName: serverName } },
      },
      '#withProxyURL':: d.fn(help='"ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint."', args=[d.arg(name='proxyURL', type=d.T.string)]),
      withProxyURL(proxyURL): { proxyURL: proxyURL },
      '#withUrl':: d.fn(help='"URL from which the targets are fetched."', args=[d.arg(name='url', type=d.T.string)]),
      withUrl(url): { url: url },
    },
    '#kubernetesSDConfigs':: d.obj(help='"KubernetesSDConfigs defines a list of Kubernetes service discovery configurations."'),
    kubernetesSDConfigs: {
      '#attach_metadata':: d.obj(help='"AttachMetadata configures metadata attaching from service discovery"'),
      attach_metadata: {
        '#withNode':: d.fn(help='"Node instructs vmagent to add node specific metadata from service discovery\\nValid for roles: pod, endpoints, endpointslice."', args=[d.arg(name='node', type=d.T.boolean)]),
        withNode(node): { attach_metadata+: { node: node } },
      },
      '#authorization':: d.obj(help='"Authorization header to use on every scrape request."'),
      authorization: {
        '#credentials':: d.obj(help='"Reference to the secret with value for authorization"'),
        credentials: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { authorization+: { credentials+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { authorization+: { credentials+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { authorization+: { credentials+: { optional: optional } } },
        },
        '#withCredentialsFile':: d.fn(help='"File with value for authorization"', args=[d.arg(name='credentialsFile', type=d.T.string)]),
        withCredentialsFile(credentialsFile): { authorization+: { credentialsFile: credentialsFile } },
        '#withType':: d.fn(help='"Type of authorization, default to bearer"', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { authorization+: { type: type } },
      },
      '#basicAuth':: d.obj(help='"BasicAuth information to use on every scrape request."'),
      basicAuth: {
        '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
        password: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { basicAuth+: { password+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { basicAuth+: { password+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { basicAuth+: { password+: { optional: optional } } },
        },
        '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
        username: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { basicAuth+: { username+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { basicAuth+: { username+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { basicAuth+: { username+: { optional: optional } } },
        },
        '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
        withPassword_file(password_file): { basicAuth+: { password_file: password_file } },
      },
      '#namespaces':: d.obj(help='"Optional namespace discovery. If omitted, discover targets across all namespaces."'),
      namespaces: {
        '#withNames':: d.fn(help="\"List of namespaces where to watch for resources.\\nIf empty and `ownNamespace` isn't true, watch for resources in all namespaces.\"", args=[d.arg(name='names', type=d.T.array)]),
        withNames(names): { namespaces+: { names: if std.isArray(v=names) then names else [names] } },
        '#withNamesMixin':: d.fn(help="\"List of namespaces where to watch for resources.\\nIf empty and `ownNamespace` isn't true, watch for resources in all namespaces.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='names', type=d.T.array)]),
        withNamesMixin(names): { namespaces+: { names+: if std.isArray(v=names) then names else [names] } },
        '#withOwnNamespace':: d.fn(help='"Includes the namespace in which the pod exists to the list of watched namespaces."', args=[d.arg(name='ownNamespace', type=d.T.boolean)]),
        withOwnNamespace(ownNamespace): { namespaces+: { ownNamespace: ownNamespace } },
      },
      '#oauth2':: d.obj(help='"OAuth2 defines auth configuration"'),
      oauth2: {
        '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
        client_id: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { oauth2+: { client_id+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { oauth2+: { client_id+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { oauth2+: { client_id+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { oauth2+: { client_id+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { oauth2+: { client_id+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { oauth2+: { client_id+: { secret+: { optional: optional } } } },
          },
        },
        '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
        client_secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { oauth2+: { client_secret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { oauth2+: { client_secret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { oauth2+: { client_secret+: { optional: optional } } },
        },
        '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
        withClient_secret_file(client_secret_file): { oauth2+: { client_secret_file: client_secret_file } },
        '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
        withEndpoint_params(endpoint_params): { oauth2+: { endpoint_params: endpoint_params } },
        '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
        withEndpoint_paramsMixin(endpoint_params): { oauth2+: { endpoint_params+: endpoint_params } },
        '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
        withScopes(scopes): { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } },
        '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
        withScopesMixin(scopes): { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } },
        '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
        withToken_url(token_url): { oauth2+: { token_url: token_url } },
      },
      '#proxy_client_config':: d.obj(help='"ProxyClientConfig configures proxy auth settings for scraping\\nSee [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)"'),
      proxy_client_config: {
        '#basic_auth':: d.obj(help='"BasicAuth allow an endpoint to authenticate over basic authentication"'),
        basic_auth: {
          '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
          password: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { password+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { password+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { password+: { optional: optional } } } },
          },
          '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
          username: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { basic_auth+: { username+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { basic_auth+: { username+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { basic_auth+: { username+: { optional: optional } } } },
          },
          '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
          withPassword_file(password_file): { proxy_client_config+: { basic_auth+: { password_file: password_file } } },
        },
        '#bearer_token':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
        bearer_token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { proxy_client_config+: { bearer_token+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { proxy_client_config+: { bearer_token+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { proxy_client_config+: { bearer_token+: { optional: optional } } },
        },
        '#tls_config':: d.obj(help='"TLSConfig specifies TLSConfig configuration parameters."'),
        tls_config: {
          '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
          ca: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { ca+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { ca+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } },
            },
          },
          '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
          cert: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { proxy_client_config+: { tls_config+: { cert+: { secret+: { key: key } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { proxy_client_config+: { tls_config+: { cert+: { secret+: { name: name } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { proxy_client_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } },
            },
          },
          '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
          keySecret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { proxy_client_config+: { tls_config+: { keySecret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { proxy_client_config+: { tls_config+: { keySecret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { proxy_client_config+: { tls_config+: { keySecret+: { optional: optional } } } },
          },
          '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
          withCaFile(caFile): { proxy_client_config+: { tls_config+: { caFile: caFile } } },
          '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
          withCertFile(certFile): { proxy_client_config+: { tls_config+: { certFile: certFile } } },
          '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
          withInsecureSkipVerify(insecureSkipVerify): { proxy_client_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } },
          '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
          withKeyFile(keyFile): { proxy_client_config+: { tls_config+: { keyFile: keyFile } } },
          '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
          withServerName(serverName): { proxy_client_config+: { tls_config+: { serverName: serverName } } },
        },
        '#withBearer_token_file':: d.fn(help='', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
        withBearer_token_file(bearer_token_file): { proxy_client_config+: { bearer_token_file: bearer_token_file } },
      },
      '#selectors':: d.obj(help='"Selector to select objects."'),
      selectors: {
        '#withField':: d.fn(help='', args=[d.arg(name='field', type=d.T.string)]),
        withField(field): { field: field },
        '#withLabel':: d.fn(help='', args=[d.arg(name='label', type=d.T.string)]),
        withLabel(label): { label: label },
        '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
        withRole(role): { role: role },
      },
      '#tlsConfig':: d.obj(help='"TLS configuration to use on every scrape request"'),
      tlsConfig: {
        '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
        ca: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { secret+: { optional: optional } } } },
          },
        },
        '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
        cert: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { secret+: { optional: optional } } } },
          },
        },
        '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
        keySecret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { tlsConfig+: { keySecret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { tlsConfig+: { keySecret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { tlsConfig+: { keySecret+: { optional: optional } } },
        },
        '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
        withCaFile(caFile): { tlsConfig+: { caFile: caFile } },
        '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
        withCertFile(certFile): { tlsConfig+: { certFile: certFile } },
        '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
        withInsecureSkipVerify(insecureSkipVerify): { tlsConfig+: { insecureSkipVerify: insecureSkipVerify } },
        '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
        withKeyFile(keyFile): { tlsConfig+: { keyFile: keyFile } },
        '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
        withServerName(serverName): { tlsConfig+: { serverName: serverName } },
      },
      '#withApiServer':: d.fn(help="\"The API server address consisting of a hostname or IP address followed\\nby an optional port number.\\nIf left empty, assuming process is running inside\\nof the cluster. It will discover API servers automatically and use the pod's\\nCA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.\"", args=[d.arg(name='apiServer', type=d.T.string)]),
      withApiServer(apiServer): { apiServer: apiServer },
      '#withFollowRedirects':: d.fn(help='"Configure whether HTTP requests follow HTTP 3xx redirects."', args=[d.arg(name='followRedirects', type=d.T.boolean)]),
      withFollowRedirects(followRedirects): { followRedirects: followRedirects },
      '#withProxyURL':: d.fn(help='"ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint."', args=[d.arg(name='proxyURL', type=d.T.string)]),
      withProxyURL(proxyURL): { proxyURL: proxyURL },
      '#withRole':: d.fn(help='"Role of the Kubernetes entities that should be discovered."', args=[d.arg(name='role', type=d.T.string)]),
      withRole(role): { role: role },
      '#withSelectors':: d.fn(help='"Selector to select objects."', args=[d.arg(name='selectors', type=d.T.array)]),
      withSelectors(selectors): { selectors: if std.isArray(v=selectors) then selectors else [selectors] },
      '#withSelectorsMixin':: d.fn(help='"Selector to select objects."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='selectors', type=d.T.array)]),
      withSelectorsMixin(selectors): { selectors+: if std.isArray(v=selectors) then selectors else [selectors] },
    },
    '#metricRelabelConfigs':: d.obj(help='"MetricRelabelConfigs to apply to samples after scrapping."'),
    metricRelabelConfigs: {
      '#withAction':: d.fn(help="\"Action to perform based on regex matching. Default is 'replace'\"", args=[d.arg(name='action', type=d.T.string)]),
      withAction(action): { action: action },
      '#withIf':: d.fn(help="\"If represents metricsQL match expression (or list of expressions): '{__name__=~\\\"foo_.*\\\"}'\"", args=[d.arg(name='If', type=d.T.any)]),
      withIf(If): { 'if': If },
      '#withLabels':: d.fn(help='"Labels is used together with Match for `action: graphite`"', args=[d.arg(name='labels', type=d.T.object)]),
      withLabels(labels): { labels: labels },
      '#withLabelsMixin':: d.fn(help='"Labels is used together with Match for `action: graphite`"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
      withLabelsMixin(labels): { labels+: labels },
      '#withMatch':: d.fn(help='"Match is used together with Labels for `action: graphite`"', args=[d.arg(name='match', type=d.T.string)]),
      withMatch(match): { match: match },
      '#withModulus':: d.fn(help='"Modulus to take of the hash of the source label values."', args=[d.arg(name='modulus', type=d.T.integer)]),
      withModulus(modulus): { modulus: modulus },
      '#withRegex':: d.fn(help="\"Regular expression against which the extracted value is matched. Default is '(.*)'\\nvictoriaMetrics supports multiline regex joined with |\\nhttps://docs.victoriametrics.com/vmagent/#relabeling-enhancements\"", args=[d.arg(name='regex', type=d.T.any)]),
      withRegex(regex): { regex: regex },
      '#withReplacement':: d.fn(help="\"Replacement value against which a regex replace is performed if the\\nregular expression matches. Regex capture groups are available. Default is '$1'\"", args=[d.arg(name='replacement', type=d.T.string)]),
      withReplacement(replacement): { replacement: replacement },
      '#withSeparator':: d.fn(help="\"Separator placed between concatenated source label values. default is ';'.\"", args=[d.arg(name='separator', type=d.T.string)]),
      withSeparator(separator): { separator: separator },
      '#withSourceLabels':: d.fn(help='"The source labels select values from existing labels. Their content is concatenated\\nusing the configured separator and matched against the configured regular expression\\nfor the replace, keep, and drop actions."', args=[d.arg(name='sourceLabels', type=d.T.array)]),
      withSourceLabels(sourceLabels): { sourceLabels: if std.isArray(v=sourceLabels) then sourceLabels else [sourceLabels] },
      '#withSourceLabelsMixin':: d.fn(help='"The source labels select values from existing labels. Their content is concatenated\\nusing the configured separator and matched against the configured regular expression\\nfor the replace, keep, and drop actions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sourceLabels', type=d.T.array)]),
      withSourceLabelsMixin(sourceLabels): { sourceLabels+: if std.isArray(v=sourceLabels) then sourceLabels else [sourceLabels] },
      '#withSource_labels':: d.fn(help='"UnderScoreSourceLabels - additional form of source labels source_labels\\nfor compatibility with original relabel config.\\nif set  both sourceLabels and source_labels, sourceLabels has priority.\\nfor details https://github.com/VictoriaMetrics/operator/issues/131"', args=[d.arg(name='source_labels', type=d.T.array)]),
      withSource_labels(source_labels): { source_labels: if std.isArray(v=source_labels) then source_labels else [source_labels] },
      '#withSource_labelsMixin':: d.fn(help='"UnderScoreSourceLabels - additional form of source labels source_labels\\nfor compatibility with original relabel config.\\nif set  both sourceLabels and source_labels, sourceLabels has priority.\\nfor details https://github.com/VictoriaMetrics/operator/issues/131"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='source_labels', type=d.T.array)]),
      withSource_labelsMixin(source_labels): { source_labels+: if std.isArray(v=source_labels) then source_labels else [source_labels] },
      '#withTargetLabel':: d.fn(help='"Label to which the resulting value is written in a replace action.\\nIt is mandatory for replace actions. Regex capture groups are available."', args=[d.arg(name='targetLabel', type=d.T.string)]),
      withTargetLabel(targetLabel): { targetLabel: targetLabel },
      '#withTarget_label':: d.fn(help='"UnderScoreTargetLabel - additional form of target label - target_label\\nfor compatibility with original relabel config.\\nif set  both targetLabel and target_label, targetLabel has priority.\\nfor details https://github.com/VictoriaMetrics/operator/issues/131"', args=[d.arg(name='target_label', type=d.T.string)]),
      withTarget_label(target_label): { target_label: target_label },
    },
    '#oauth2':: d.obj(help='"OAuth2 defines auth configuration"'),
    oauth2: {
      '#client_id':: d.obj(help='"The secret or configmap containing the OAuth2 client id"'),
      client_id: {
        '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
        configMap: {
          '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { oauth2+: { client_id+: { configMap+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { oauth2+: { client_id+: { configMap+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { oauth2+: { client_id+: { configMap+: { optional: optional } } } } },
        },
        '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
        secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { oauth2+: { client_id+: { secret+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { oauth2+: { client_id+: { secret+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { oauth2+: { client_id+: { secret+: { optional: optional } } } } },
        },
      },
      '#client_secret':: d.obj(help='"The secret containing the OAuth2 client secret"'),
      client_secret: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { oauth2+: { client_secret+: { key: key } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { oauth2+: { client_secret+: { name: name } } } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { oauth2+: { client_secret+: { optional: optional } } } },
      },
      '#withClient_secret_file':: d.fn(help='"ClientSecretFile defines path for client secret file."', args=[d.arg(name='client_secret_file', type=d.T.string)]),
      withClient_secret_file(client_secret_file): { spec+: { oauth2+: { client_secret_file: client_secret_file } } },
      '#withEndpoint_params':: d.fn(help='"Parameters to append to the token URL"', args=[d.arg(name='endpoint_params', type=d.T.object)]),
      withEndpoint_params(endpoint_params): { spec+: { oauth2+: { endpoint_params: endpoint_params } } },
      '#withEndpoint_paramsMixin':: d.fn(help='"Parameters to append to the token URL"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='endpoint_params', type=d.T.object)]),
      withEndpoint_paramsMixin(endpoint_params): { spec+: { oauth2+: { endpoint_params+: endpoint_params } } },
      '#withScopes':: d.fn(help='"OAuth2 scopes used for the token request"', args=[d.arg(name='scopes', type=d.T.array)]),
      withScopes(scopes): { spec+: { oauth2+: { scopes: if std.isArray(v=scopes) then scopes else [scopes] } } },
      '#withScopesMixin':: d.fn(help='"OAuth2 scopes used for the token request"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
      withScopesMixin(scopes): { spec+: { oauth2+: { scopes+: if std.isArray(v=scopes) then scopes else [scopes] } } },
      '#withToken_url':: d.fn(help='"The URL to fetch the token from"', args=[d.arg(name='token_url', type=d.T.string)]),
      withToken_url(token_url): { spec+: { oauth2+: { token_url: token_url } } },
    },
    '#openstackSDConfigs':: d.obj(help='"OpenStackSDConfigs defines a list of OpenStack service discovery configurations."'),
    openstackSDConfigs: {
      '#applicationCredentialSecret':: d.obj(help='"The applicationCredentialSecret field is required if using an application\\ncredential to authenticate."'),
      applicationCredentialSecret: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { applicationCredentialSecret+: { key: key } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { applicationCredentialSecret+: { name: name } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { applicationCredentialSecret+: { optional: optional } },
      },
      '#password':: d.obj(help="\"Password for the Identity V2 and V3 APIs. Consult with your provider's\\ncontrol panel to discover your account's preferred method of authentication.\""),
      password: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { password+: { key: key } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { password+: { name: name } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { password+: { optional: optional } },
      },
      '#tlsConfig':: d.obj(help='"TLS configuration to use on every scrape request"'),
      tlsConfig: {
        '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
        ca: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { ca+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { ca+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { ca+: { secret+: { optional: optional } } } },
          },
        },
        '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
        cert: {
          '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
          configMap: {
            '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { configMap+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { configMap+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { configMap+: { optional: optional } } } },
          },
          '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
          secret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { tlsConfig+: { cert+: { secret+: { key: key } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { tlsConfig+: { cert+: { secret+: { name: name } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { tlsConfig+: { cert+: { secret+: { optional: optional } } } },
          },
        },
        '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
        keySecret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { tlsConfig+: { keySecret+: { key: key } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { tlsConfig+: { keySecret+: { name: name } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { tlsConfig+: { keySecret+: { optional: optional } } },
        },
        '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
        withCaFile(caFile): { tlsConfig+: { caFile: caFile } },
        '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
        withCertFile(certFile): { tlsConfig+: { certFile: certFile } },
        '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
        withInsecureSkipVerify(insecureSkipVerify): { tlsConfig+: { insecureSkipVerify: insecureSkipVerify } },
        '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
        withKeyFile(keyFile): { tlsConfig+: { keyFile: keyFile } },
        '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
        withServerName(serverName): { tlsConfig+: { serverName: serverName } },
      },
      '#withAllTenants':: d.fn(help="\"Whether the service discovery should list all instances for all projects.\\nIt is only relevant for the 'instance' role and usually requires admin permissions.\"", args=[d.arg(name='allTenants', type=d.T.boolean)]),
      withAllTenants(allTenants): { allTenants: allTenants },
      '#withApplicationCredentialId':: d.fn(help='"ApplicationCredentialID"', args=[d.arg(name='applicationCredentialId', type=d.T.string)]),
      withApplicationCredentialId(applicationCredentialId): { applicationCredentialId: applicationCredentialId },
      '#withApplicationCredentialName':: d.fn(help='"The ApplicationCredentialID or ApplicationCredentialName fields are\\nrequired if using an application credential to authenticate. Some providers\\nallow you to create an application credential to authenticate rather than a\\npassword."', args=[d.arg(name='applicationCredentialName', type=d.T.string)]),
      withApplicationCredentialName(applicationCredentialName): { applicationCredentialName: applicationCredentialName },
      '#withAvailability':: d.fn(help='"Availability of the endpoint to connect to."', args=[d.arg(name='availability', type=d.T.string)]),
      withAvailability(availability): { availability: availability },
      '#withDomainID':: d.fn(help='"DomainID"', args=[d.arg(name='domainID', type=d.T.string)]),
      withDomainID(domainID): { domainID: domainID },
      '#withDomainName':: d.fn(help='"At most one of domainId and domainName must be provided if using username\\nwith Identity V3. Otherwise, either are optional."', args=[d.arg(name='domainName', type=d.T.string)]),
      withDomainName(domainName): { domainName: domainName },
      '#withIdentityEndpoint':: d.fn(help='"IdentityEndpoint specifies the HTTP endpoint that is required to work with\\nthe Identity API of the appropriate version."', args=[d.arg(name='identityEndpoint', type=d.T.string)]),
      withIdentityEndpoint(identityEndpoint): { identityEndpoint: identityEndpoint },
      '#withPort':: d.fn(help='"The port to scrape metrics from. If using the public IP address, this must\\ninstead be specified in the relabeling rule."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { port: port },
      '#withProjectID':: d.fn(help='" ProjectID"', args=[d.arg(name='projectID', type=d.T.string)]),
      withProjectID(projectID): { projectID: projectID },
      '#withProjectName':: d.fn(help="\"The ProjectId and ProjectName fields are optional for the Identity V2 API.\\nSome providers allow you to specify a ProjectName instead of the ProjectId.\\nSome require both. Your provider's authentication policies will determine\\nhow these fields influence authentication.\"", args=[d.arg(name='projectName', type=d.T.string)]),
      withProjectName(projectName): { projectName: projectName },
      '#withRegion':: d.fn(help='"The OpenStack Region."', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { region: region },
      '#withRole':: d.fn(help='"The OpenStack role of entities that should be discovered."', args=[d.arg(name='role', type=d.T.string)]),
      withRole(role): { role: role },
      '#withUserid':: d.fn(help='"UserID"', args=[d.arg(name='userid', type=d.T.string)]),
      withUserid(userid): { userid: userid },
      '#withUsername':: d.fn(help="\"Username is required if using Identity V2 API. Consult with your provider's\\ncontrol panel to discover your account's username.\\nIn Identity V3, either userid or a combination of username\\nand domainId or domainName are needed\"", args=[d.arg(name='username', type=d.T.string)]),
      withUsername(username): { username: username },
    },
    '#relabelConfigs':: d.obj(help='"RelabelConfigs to apply to samples during service discovery."'),
    relabelConfigs: {
      '#withAction':: d.fn(help="\"Action to perform based on regex matching. Default is 'replace'\"", args=[d.arg(name='action', type=d.T.string)]),
      withAction(action): { action: action },
      '#withIf':: d.fn(help="\"If represents metricsQL match expression (or list of expressions): '{__name__=~\\\"foo_.*\\\"}'\"", args=[d.arg(name='If', type=d.T.any)]),
      withIf(If): { 'if': If },
      '#withLabels':: d.fn(help='"Labels is used together with Match for `action: graphite`"', args=[d.arg(name='labels', type=d.T.object)]),
      withLabels(labels): { labels: labels },
      '#withLabelsMixin':: d.fn(help='"Labels is used together with Match for `action: graphite`"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
      withLabelsMixin(labels): { labels+: labels },
      '#withMatch':: d.fn(help='"Match is used together with Labels for `action: graphite`"', args=[d.arg(name='match', type=d.T.string)]),
      withMatch(match): { match: match },
      '#withModulus':: d.fn(help='"Modulus to take of the hash of the source label values."', args=[d.arg(name='modulus', type=d.T.integer)]),
      withModulus(modulus): { modulus: modulus },
      '#withRegex':: d.fn(help="\"Regular expression against which the extracted value is matched. Default is '(.*)'\\nvictoriaMetrics supports multiline regex joined with |\\nhttps://docs.victoriametrics.com/vmagent/#relabeling-enhancements\"", args=[d.arg(name='regex', type=d.T.any)]),
      withRegex(regex): { regex: regex },
      '#withReplacement':: d.fn(help="\"Replacement value against which a regex replace is performed if the\\nregular expression matches. Regex capture groups are available. Default is '$1'\"", args=[d.arg(name='replacement', type=d.T.string)]),
      withReplacement(replacement): { replacement: replacement },
      '#withSeparator':: d.fn(help="\"Separator placed between concatenated source label values. default is ';'.\"", args=[d.arg(name='separator', type=d.T.string)]),
      withSeparator(separator): { separator: separator },
      '#withSourceLabels':: d.fn(help='"The source labels select values from existing labels. Their content is concatenated\\nusing the configured separator and matched against the configured regular expression\\nfor the replace, keep, and drop actions."', args=[d.arg(name='sourceLabels', type=d.T.array)]),
      withSourceLabels(sourceLabels): { sourceLabels: if std.isArray(v=sourceLabels) then sourceLabels else [sourceLabels] },
      '#withSourceLabelsMixin':: d.fn(help='"The source labels select values from existing labels. Their content is concatenated\\nusing the configured separator and matched against the configured regular expression\\nfor the replace, keep, and drop actions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sourceLabels', type=d.T.array)]),
      withSourceLabelsMixin(sourceLabels): { sourceLabels+: if std.isArray(v=sourceLabels) then sourceLabels else [sourceLabels] },
      '#withSource_labels':: d.fn(help='"UnderScoreSourceLabels - additional form of source labels source_labels\\nfor compatibility with original relabel config.\\nif set  both sourceLabels and source_labels, sourceLabels has priority.\\nfor details https://github.com/VictoriaMetrics/operator/issues/131"', args=[d.arg(name='source_labels', type=d.T.array)]),
      withSource_labels(source_labels): { source_labels: if std.isArray(v=source_labels) then source_labels else [source_labels] },
      '#withSource_labelsMixin':: d.fn(help='"UnderScoreSourceLabels - additional form of source labels source_labels\\nfor compatibility with original relabel config.\\nif set  both sourceLabels and source_labels, sourceLabels has priority.\\nfor details https://github.com/VictoriaMetrics/operator/issues/131"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='source_labels', type=d.T.array)]),
      withSource_labelsMixin(source_labels): { source_labels+: if std.isArray(v=source_labels) then source_labels else [source_labels] },
      '#withTargetLabel':: d.fn(help='"Label to which the resulting value is written in a replace action.\\nIt is mandatory for replace actions. Regex capture groups are available."', args=[d.arg(name='targetLabel', type=d.T.string)]),
      withTargetLabel(targetLabel): { targetLabel: targetLabel },
      '#withTarget_label':: d.fn(help='"UnderScoreTargetLabel - additional form of target label - target_label\\nfor compatibility with original relabel config.\\nif set  both targetLabel and target_label, targetLabel has priority.\\nfor details https://github.com/VictoriaMetrics/operator/issues/131"', args=[d.arg(name='target_label', type=d.T.string)]),
      withTarget_label(target_label): { target_label: target_label },
    },
    '#staticConfigs':: d.obj(help='"StaticConfigs defines a list of static targets with a common label set."'),
    staticConfigs: {
      '#withLabels':: d.fn(help='"Labels assigned to all metrics scraped from the targets."', args=[d.arg(name='labels', type=d.T.object)]),
      withLabels(labels): { labels: labels },
      '#withLabelsMixin':: d.fn(help='"Labels assigned to all metrics scraped from the targets."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
      withLabelsMixin(labels): { labels+: labels },
      '#withTargets':: d.fn(help='"List of targets for this static configuration."', args=[d.arg(name='targets', type=d.T.array)]),
      withTargets(targets): { targets: if std.isArray(v=targets) then targets else [targets] },
      '#withTargetsMixin':: d.fn(help='"List of targets for this static configuration."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targets', type=d.T.array)]),
      withTargetsMixin(targets): { targets+: if std.isArray(v=targets) then targets else [targets] },
    },
    '#tlsConfig':: d.obj(help='"TLSConfig configuration to use when scraping the endpoint"'),
    tlsConfig: {
      '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
      ca: {
        '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
        configMap: {
          '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { tlsConfig+: { ca+: { configMap+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { tlsConfig+: { ca+: { configMap+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { tlsConfig+: { ca+: { configMap+: { optional: optional } } } } },
        },
        '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
        secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { tlsConfig+: { ca+: { secret+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { tlsConfig+: { ca+: { secret+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { tlsConfig+: { ca+: { secret+: { optional: optional } } } } },
        },
      },
      '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
      cert: {
        '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
        configMap: {
          '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { tlsConfig+: { cert+: { configMap+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { tlsConfig+: { cert+: { configMap+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { tlsConfig+: { cert+: { configMap+: { optional: optional } } } } },
        },
        '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
        secret: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { tlsConfig+: { cert+: { secret+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { tlsConfig+: { cert+: { secret+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { tlsConfig+: { cert+: { secret+: { optional: optional } } } } },
        },
      },
      '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
      keySecret: {
        '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { tlsConfig+: { keySecret+: { key: key } } } },
        '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { tlsConfig+: { keySecret+: { name: name } } } },
        '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { spec+: { tlsConfig+: { keySecret+: { optional: optional } } } },
      },
      '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
      withCaFile(caFile): { spec+: { tlsConfig+: { caFile: caFile } } },
      '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
      withCertFile(certFile): { spec+: { tlsConfig+: { certFile: certFile } } },
      '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
      withInsecureSkipVerify(insecureSkipVerify): { spec+: { tlsConfig+: { insecureSkipVerify: insecureSkipVerify } } },
      '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
      withKeyFile(keyFile): { spec+: { tlsConfig+: { keyFile: keyFile } } },
      '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
      withServerName(serverName): { spec+: { tlsConfig+: { serverName: serverName } } },
    },
    '#vm_scrape_params':: d.obj(help='"VMScrapeParams defines VictoriaMetrics specific scrape parameters"'),
    vm_scrape_params: {
      '#proxy_client_config':: d.obj(help='"ProxyClientConfig configures proxy auth settings for scraping\\nSee feature description https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy"'),
      proxy_client_config: {
        '#basic_auth':: d.obj(help='"BasicAuth allow an endpoint to authenticate over basic authentication"'),
        basic_auth: {
          '#password':: d.obj(help='"Password defines reference for secret with password value\\nThe secret needs to be in the same namespace as scrape object"'),
          password: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { password+: { key: key } } } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { password+: { name: name } } } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { password+: { optional: optional } } } } } },
          },
          '#username':: d.obj(help='"Username defines reference for secret with username value\\nThe secret needs to be in the same namespace as scrape object"'),
          username: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { username+: { key: key } } } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { username+: { name: name } } } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { username+: { optional: optional } } } } } },
          },
          '#withPassword_file':: d.fn(help='"PasswordFile defines path to password file at disk\\nmust be pre-mounted"', args=[d.arg(name='password_file', type=d.T.string)]),
          withPassword_file(password_file): { spec+: { vm_scrape_params+: { proxy_client_config+: { basic_auth+: { password_file: password_file } } } } },
        },
        '#bearer_token':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
        bearer_token: {
          '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { bearer_token+: { key: key } } } } },
          '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { bearer_token+: { name: name } } } } },
          '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { bearer_token+: { optional: optional } } } } },
        },
        '#tls_config':: d.obj(help='"TLSConfig specifies TLSConfig configuration parameters."'),
        tls_config: {
          '#ca':: d.obj(help='"Stuct containing the CA cert to use for the targets."'),
          ca: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { ca+: { configMap+: { key: key } } } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { ca+: { configMap+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { ca+: { configMap+: { optional: optional } } } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { ca+: { secret+: { key: key } } } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { ca+: { secret+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { ca+: { secret+: { optional: optional } } } } } } },
            },
          },
          '#cert':: d.obj(help='"Struct containing the client cert file for the targets."'),
          cert: {
            '#configMap':: d.obj(help='"ConfigMap containing data to use for the targets."'),
            configMap: {
              '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { cert+: { configMap+: { key: key } } } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { cert+: { configMap+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { cert+: { configMap+: { optional: optional } } } } } } },
            },
            '#secret':: d.obj(help='"Secret containing data to use for the targets."'),
            secret: {
              '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { cert+: { secret+: { key: key } } } } } } },
              '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { cert+: { secret+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { cert+: { secret+: { optional: optional } } } } } } },
            },
          },
          '#keySecret':: d.obj(help='"Secret containing the client key file for the targets."'),
          keySecret: {
            '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { keySecret+: { key: key } } } } } },
            '#withName':: d.fn(help='"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { keySecret+: { name: name } } } } } },
            '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { keySecret+: { optional: optional } } } } } },
          },
          '#withCaFile':: d.fn(help='"Path to the CA cert in the container to use for the targets."', args=[d.arg(name='caFile', type=d.T.string)]),
          withCaFile(caFile): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { caFile: caFile } } } } },
          '#withCertFile':: d.fn(help='"Path to the client cert file in the container for the targets."', args=[d.arg(name='certFile', type=d.T.string)]),
          withCertFile(certFile): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { certFile: certFile } } } } },
          '#withInsecureSkipVerify':: d.fn(help='"Disable target certificate validation."', args=[d.arg(name='insecureSkipVerify', type=d.T.boolean)]),
          withInsecureSkipVerify(insecureSkipVerify): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { insecureSkipVerify: insecureSkipVerify } } } } },
          '#withKeyFile':: d.fn(help='"Path to the client key file in the container for the targets."', args=[d.arg(name='keyFile', type=d.T.string)]),
          withKeyFile(keyFile): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { keyFile: keyFile } } } } },
          '#withServerName':: d.fn(help='"Used to verify the hostname for the targets."', args=[d.arg(name='serverName', type=d.T.string)]),
          withServerName(serverName): { spec+: { vm_scrape_params+: { proxy_client_config+: { tls_config+: { serverName: serverName } } } } },
        },
        '#withBearer_token_file':: d.fn(help='', args=[d.arg(name='bearer_token_file', type=d.T.string)]),
        withBearer_token_file(bearer_token_file): { spec+: { vm_scrape_params+: { proxy_client_config+: { bearer_token_file: bearer_token_file } } } },
      },
      '#withDisable_compression':: d.fn(help='"DisableCompression"', args=[d.arg(name='disable_compression', type=d.T.boolean)]),
      withDisable_compression(disable_compression): { spec+: { vm_scrape_params+: { disable_compression: disable_compression } } },
      '#withDisable_keep_alive':: d.fn(help='"disable_keepalive allows disabling HTTP keep-alive when scraping targets.\\nBy default, HTTP keep-alive is enabled, so TCP connections to scrape targets\\ncould be re-used.\\nSee https://docs.victoriametrics.com/vmagent#scrape_config-enhancements"', args=[d.arg(name='disable_keep_alive', type=d.T.boolean)]),
      withDisable_keep_alive(disable_keep_alive): { spec+: { vm_scrape_params+: { disable_keep_alive: disable_keep_alive } } },
      '#withHeaders':: d.fn(help="\"Headers allows sending custom headers to scrape targets\\nmust be in of semicolon separated header with it's value\\neg:\\nheaderName: headerValue\\nvmagent supports since 1.79.0 version\"", args=[d.arg(name='headers', type=d.T.array)]),
      withHeaders(headers): { spec+: { vm_scrape_params+: { headers: if std.isArray(v=headers) then headers else [headers] } } },
      '#withHeadersMixin':: d.fn(help="\"Headers allows sending custom headers to scrape targets\\nmust be in of semicolon separated header with it's value\\neg:\\nheaderName: headerValue\\nvmagent supports since 1.79.0 version\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='headers', type=d.T.array)]),
      withHeadersMixin(headers): { spec+: { vm_scrape_params+: { headers+: if std.isArray(v=headers) then headers else [headers] } } },
      '#withNo_stale_markers':: d.fn(help='', args=[d.arg(name='no_stale_markers', type=d.T.boolean)]),
      withNo_stale_markers(no_stale_markers): { spec+: { vm_scrape_params+: { no_stale_markers: no_stale_markers } } },
      '#withScrape_align_interval':: d.fn(help='', args=[d.arg(name='scrape_align_interval', type=d.T.string)]),
      withScrape_align_interval(scrape_align_interval): { spec+: { vm_scrape_params+: { scrape_align_interval: scrape_align_interval } } },
      '#withScrape_offset':: d.fn(help='', args=[d.arg(name='scrape_offset', type=d.T.string)]),
      withScrape_offset(scrape_offset): { spec+: { vm_scrape_params+: { scrape_offset: scrape_offset } } },
      '#withStream_parse':: d.fn(help='', args=[d.arg(name='stream_parse', type=d.T.boolean)]),
      withStream_parse(stream_parse): { spec+: { vm_scrape_params+: { stream_parse: stream_parse } } },
    },
    '#withAzureSDConfigs':: d.fn(help='"AzureSDConfigs defines a list of Azure service discovery configurations."', args=[d.arg(name='azureSDConfigs', type=d.T.array)]),
    withAzureSDConfigs(azureSDConfigs): { spec+: { azureSDConfigs: if std.isArray(v=azureSDConfigs) then azureSDConfigs else [azureSDConfigs] } },
    '#withAzureSDConfigsMixin':: d.fn(help='"AzureSDConfigs defines a list of Azure service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='azureSDConfigs', type=d.T.array)]),
    withAzureSDConfigsMixin(azureSDConfigs): { spec+: { azureSDConfigs+: if std.isArray(v=azureSDConfigs) then azureSDConfigs else [azureSDConfigs] } },
    '#withBearerTokenFile':: d.fn(help='"File to read bearer token for scraping targets."', args=[d.arg(name='bearerTokenFile', type=d.T.string)]),
    withBearerTokenFile(bearerTokenFile): { spec+: { bearerTokenFile: bearerTokenFile } },
    '#withConsulSDConfigs':: d.fn(help='"ConsulSDConfigs defines a list of Consul service discovery configurations."', args=[d.arg(name='consulSDConfigs', type=d.T.array)]),
    withConsulSDConfigs(consulSDConfigs): { spec+: { consulSDConfigs: if std.isArray(v=consulSDConfigs) then consulSDConfigs else [consulSDConfigs] } },
    '#withConsulSDConfigsMixin':: d.fn(help='"ConsulSDConfigs defines a list of Consul service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='consulSDConfigs', type=d.T.array)]),
    withConsulSDConfigsMixin(consulSDConfigs): { spec+: { consulSDConfigs+: if std.isArray(v=consulSDConfigs) then consulSDConfigs else [consulSDConfigs] } },
    '#withDigitalOceanSDConfigs':: d.fn(help='"DigitalOceanSDConfigs defines a list of DigitalOcean service discovery configurations."', args=[d.arg(name='digitalOceanSDConfigs', type=d.T.array)]),
    withDigitalOceanSDConfigs(digitalOceanSDConfigs): { spec+: { digitalOceanSDConfigs: if std.isArray(v=digitalOceanSDConfigs) then digitalOceanSDConfigs else [digitalOceanSDConfigs] } },
    '#withDigitalOceanSDConfigsMixin':: d.fn(help='"DigitalOceanSDConfigs defines a list of DigitalOcean service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='digitalOceanSDConfigs', type=d.T.array)]),
    withDigitalOceanSDConfigsMixin(digitalOceanSDConfigs): { spec+: { digitalOceanSDConfigs+: if std.isArray(v=digitalOceanSDConfigs) then digitalOceanSDConfigs else [digitalOceanSDConfigs] } },
    '#withDnsSDConfigs':: d.fn(help='"DNSSDConfigs defines a list of DNS service discovery configurations."', args=[d.arg(name='dnsSDConfigs', type=d.T.array)]),
    withDnsSDConfigs(dnsSDConfigs): { spec+: { dnsSDConfigs: if std.isArray(v=dnsSDConfigs) then dnsSDConfigs else [dnsSDConfigs] } },
    '#withDnsSDConfigsMixin':: d.fn(help='"DNSSDConfigs defines a list of DNS service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dnsSDConfigs', type=d.T.array)]),
    withDnsSDConfigsMixin(dnsSDConfigs): { spec+: { dnsSDConfigs+: if std.isArray(v=dnsSDConfigs) then dnsSDConfigs else [dnsSDConfigs] } },
    '#withEc2SDConfigs':: d.fn(help='"EC2SDConfigs defines a list of EC2 service discovery configurations."', args=[d.arg(name='ec2SDConfigs', type=d.T.array)]),
    withEc2SDConfigs(ec2SDConfigs): { spec+: { ec2SDConfigs: if std.isArray(v=ec2SDConfigs) then ec2SDConfigs else [ec2SDConfigs] } },
    '#withEc2SDConfigsMixin':: d.fn(help='"EC2SDConfigs defines a list of EC2 service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ec2SDConfigs', type=d.T.array)]),
    withEc2SDConfigsMixin(ec2SDConfigs): { spec+: { ec2SDConfigs+: if std.isArray(v=ec2SDConfigs) then ec2SDConfigs else [ec2SDConfigs] } },
    '#withFileSDConfigs':: d.fn(help='"FileSDConfigs defines a list of file service discovery configurations."', args=[d.arg(name='fileSDConfigs', type=d.T.array)]),
    withFileSDConfigs(fileSDConfigs): { spec+: { fileSDConfigs: if std.isArray(v=fileSDConfigs) then fileSDConfigs else [fileSDConfigs] } },
    '#withFileSDConfigsMixin':: d.fn(help='"FileSDConfigs defines a list of file service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fileSDConfigs', type=d.T.array)]),
    withFileSDConfigsMixin(fileSDConfigs): { spec+: { fileSDConfigs+: if std.isArray(v=fileSDConfigs) then fileSDConfigs else [fileSDConfigs] } },
    '#withFollow_redirects':: d.fn(help='"FollowRedirects controls redirects for scraping."', args=[d.arg(name='follow_redirects', type=d.T.boolean)]),
    withFollow_redirects(follow_redirects): { spec+: { follow_redirects: follow_redirects } },
    '#withGceSDConfigs':: d.fn(help='"GCESDConfigs defines a list of GCE service discovery configurations."', args=[d.arg(name='gceSDConfigs', type=d.T.array)]),
    withGceSDConfigs(gceSDConfigs): { spec+: { gceSDConfigs: if std.isArray(v=gceSDConfigs) then gceSDConfigs else [gceSDConfigs] } },
    '#withGceSDConfigsMixin':: d.fn(help='"GCESDConfigs defines a list of GCE service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gceSDConfigs', type=d.T.array)]),
    withGceSDConfigsMixin(gceSDConfigs): { spec+: { gceSDConfigs+: if std.isArray(v=gceSDConfigs) then gceSDConfigs else [gceSDConfigs] } },
    '#withHonorLabels':: d.fn(help="\"HonorLabels chooses the metric's labels on collisions with target labels.\"", args=[d.arg(name='honorLabels', type=d.T.boolean)]),
    withHonorLabels(honorLabels): { spec+: { honorLabels: honorLabels } },
    '#withHonorTimestamps':: d.fn(help='"HonorTimestamps controls whether vmagent respects the timestamps present in scraped data."', args=[d.arg(name='honorTimestamps', type=d.T.boolean)]),
    withHonorTimestamps(honorTimestamps): { spec+: { honorTimestamps: honorTimestamps } },
    '#withHttpSDConfigs':: d.fn(help='"HTTPSDConfigs defines a list of HTTP service discovery configurations."', args=[d.arg(name='httpSDConfigs', type=d.T.array)]),
    withHttpSDConfigs(httpSDConfigs): { spec+: { httpSDConfigs: if std.isArray(v=httpSDConfigs) then httpSDConfigs else [httpSDConfigs] } },
    '#withHttpSDConfigsMixin':: d.fn(help='"HTTPSDConfigs defines a list of HTTP service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpSDConfigs', type=d.T.array)]),
    withHttpSDConfigsMixin(httpSDConfigs): { spec+: { httpSDConfigs+: if std.isArray(v=httpSDConfigs) then httpSDConfigs else [httpSDConfigs] } },
    '#withInterval':: d.fn(help='"Interval at which metrics should be scraped"', args=[d.arg(name='interval', type=d.T.string)]),
    withInterval(interval): { spec+: { interval: interval } },
    '#withKubernetesSDConfigs':: d.fn(help='"KubernetesSDConfigs defines a list of Kubernetes service discovery configurations."', args=[d.arg(name='kubernetesSDConfigs', type=d.T.array)]),
    withKubernetesSDConfigs(kubernetesSDConfigs): { spec+: { kubernetesSDConfigs: if std.isArray(v=kubernetesSDConfigs) then kubernetesSDConfigs else [kubernetesSDConfigs] } },
    '#withKubernetesSDConfigsMixin':: d.fn(help='"KubernetesSDConfigs defines a list of Kubernetes service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetesSDConfigs', type=d.T.array)]),
    withKubernetesSDConfigsMixin(kubernetesSDConfigs): { spec+: { kubernetesSDConfigs+: if std.isArray(v=kubernetesSDConfigs) then kubernetesSDConfigs else [kubernetesSDConfigs] } },
    '#withMax_scrape_size':: d.fn(help='"MaxScrapeSize defines a maximum size of scraped data for a job"', args=[d.arg(name='max_scrape_size', type=d.T.string)]),
    withMax_scrape_size(max_scrape_size): { spec+: { max_scrape_size: max_scrape_size } },
    '#withMetricRelabelConfigs':: d.fn(help='"MetricRelabelConfigs to apply to samples after scrapping."', args=[d.arg(name='metricRelabelConfigs', type=d.T.array)]),
    withMetricRelabelConfigs(metricRelabelConfigs): { spec+: { metricRelabelConfigs: if std.isArray(v=metricRelabelConfigs) then metricRelabelConfigs else [metricRelabelConfigs] } },
    '#withMetricRelabelConfigsMixin':: d.fn(help='"MetricRelabelConfigs to apply to samples after scrapping."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metricRelabelConfigs', type=d.T.array)]),
    withMetricRelabelConfigsMixin(metricRelabelConfigs): { spec+: { metricRelabelConfigs+: if std.isArray(v=metricRelabelConfigs) then metricRelabelConfigs else [metricRelabelConfigs] } },
    '#withOpenstackSDConfigs':: d.fn(help='"OpenStackSDConfigs defines a list of OpenStack service discovery configurations."', args=[d.arg(name='openstackSDConfigs', type=d.T.array)]),
    withOpenstackSDConfigs(openstackSDConfigs): { spec+: { openstackSDConfigs: if std.isArray(v=openstackSDConfigs) then openstackSDConfigs else [openstackSDConfigs] } },
    '#withOpenstackSDConfigsMixin':: d.fn(help='"OpenStackSDConfigs defines a list of OpenStack service discovery configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='openstackSDConfigs', type=d.T.array)]),
    withOpenstackSDConfigsMixin(openstackSDConfigs): { spec+: { openstackSDConfigs+: if std.isArray(v=openstackSDConfigs) then openstackSDConfigs else [openstackSDConfigs] } },
    '#withParams':: d.fn(help='"Optional HTTP URL parameters"', args=[d.arg(name='params', type=d.T.object)]),
    withParams(params): { spec+: { params: params } },
    '#withParamsMixin':: d.fn(help='"Optional HTTP URL parameters"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='params', type=d.T.object)]),
    withParamsMixin(params): { spec+: { params+: params } },
    '#withPath':: d.fn(help='"HTTP path to scrape for metrics."', args=[d.arg(name='path', type=d.T.string)]),
    withPath(path): { spec+: { path: path } },
    '#withProxyURL':: d.fn(help='"ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint."', args=[d.arg(name='proxyURL', type=d.T.string)]),
    withProxyURL(proxyURL): { spec+: { proxyURL: proxyURL } },
    '#withRelabelConfigs':: d.fn(help='"RelabelConfigs to apply to samples during service discovery."', args=[d.arg(name='relabelConfigs', type=d.T.array)]),
    withRelabelConfigs(relabelConfigs): { spec+: { relabelConfigs: if std.isArray(v=relabelConfigs) then relabelConfigs else [relabelConfigs] } },
    '#withRelabelConfigsMixin':: d.fn(help='"RelabelConfigs to apply to samples during service discovery."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='relabelConfigs', type=d.T.array)]),
    withRelabelConfigsMixin(relabelConfigs): { spec+: { relabelConfigs+: if std.isArray(v=relabelConfigs) then relabelConfigs else [relabelConfigs] } },
    '#withSampleLimit':: d.fn(help='"SampleLimit defines per-scrape limit on number of scraped samples that will be accepted."', args=[d.arg(name='sampleLimit', type=d.T.integer)]),
    withSampleLimit(sampleLimit): { spec+: { sampleLimit: sampleLimit } },
    '#withScheme':: d.fn(help='"HTTP scheme to use for scraping."', args=[d.arg(name='scheme', type=d.T.string)]),
    withScheme(scheme): { spec+: { scheme: scheme } },
    '#withScrapeTimeout':: d.fn(help='"Timeout after which the scrape is ended"', args=[d.arg(name='scrapeTimeout', type=d.T.string)]),
    withScrapeTimeout(scrapeTimeout): { spec+: { scrapeTimeout: scrapeTimeout } },
    '#withScrape_interval':: d.fn(help='"ScrapeInterval is the same as Interval and has priority over it.\\none of scrape_interval or interval can be used"', args=[d.arg(name='scrape_interval', type=d.T.string)]),
    withScrape_interval(scrape_interval): { spec+: { scrape_interval: scrape_interval } },
    '#withSeriesLimit':: d.fn(help='"SeriesLimit defines per-scrape limit on number of unique time series\\na single target can expose during all the scrapes on the time window of 24h."', args=[d.arg(name='seriesLimit', type=d.T.integer)]),
    withSeriesLimit(seriesLimit): { spec+: { seriesLimit: seriesLimit } },
    '#withStaticConfigs':: d.fn(help='"StaticConfigs defines a list of static targets with a common label set."', args=[d.arg(name='staticConfigs', type=d.T.array)]),
    withStaticConfigs(staticConfigs): { spec+: { staticConfigs: if std.isArray(v=staticConfigs) then staticConfigs else [staticConfigs] } },
    '#withStaticConfigsMixin':: d.fn(help='"StaticConfigs defines a list of static targets with a common label set."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='staticConfigs', type=d.T.array)]),
    withStaticConfigsMixin(staticConfigs): { spec+: { staticConfigs+: if std.isArray(v=staticConfigs) then staticConfigs else [staticConfigs] } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
